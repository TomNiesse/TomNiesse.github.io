<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Tom&#39;s blog</title>
        <link>https://tomniesse.github.io/posts/</link>
        <description>Recent content in Posts on Tom&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 10 Jul 2024 22:25:00 +0200</lastBuildDate>
        <atom:link href="https://tomniesse.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>WIP: Building a PetaLinux image for the EBAZ4205 board</title>
            <link>https://tomniesse.github.io/posts/building-a-petalinux-image-for-ebaz4205/</link>
            <pubDate>Wed, 10 Jul 2024 22:25:00 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/building-a-petalinux-image-for-ebaz4205/</guid>
            <description>This work in progress post describes how a PetaLinux image can be built for the EBAZ4205 FPGA board. There are already some great tutorials online, which explain how to run a verilog project on the Xilinx Zynq 7000 FPGA. This blogpost takes snippets of the existing tutorials, with the goal of creating a new PetaLinux image for the board.
What is the EBAZ4205? The EBAZ4205 is a cheap FPGA-board, available on sites like AliExpress.</description>
            <content type="html"><![CDATA[<p>This <strong>work in progress</strong> post describes how a <a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">PetaLinux</a> image can be built for the EBAZ4205 FPGA board. There are already some great tutorials online, which explain how to run a verilog project on the <a href="https://www.xilinx.com/products/boards-and-kits/device-family/nav-zynq-7000.html">Xilinx Zynq 7000 FPGA</a>. This blogpost takes snippets of the existing tutorials, with the goal of creating a new PetaLinux image for the board.</p>
<h1 id="what-is-the-ebaz4205">What is the EBAZ4205?</h1>
<p>The EBAZ4205 is a cheap FPGA-board, available on sites like AliExpress. These boards were used for cryptomining and are now sold for around $20 per piece. When a board arrives, the PetaLinux firmware containing cryptomining software may still be installed. To make sure the board works, the steps in <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> post can be followed.</p>
<blockquote>
<p>picture of the board goes here</p>
</blockquote>
<p>The FPGA can be programmed to act as digital logic gates using verilog. This is well documented in <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> post. If you want to learn verilog without having to deal with PetaLinux, I would recommend getting a JTAG programmer for the board and following the steps in <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> post.</p>
<h1 id="software-used">Software used</h1>
<p>I wanted to know how to create a new PetaLinux image for the board, to replace all the cryptomining software. <a href="https://matthewtran.dev/2021/08/getting-started-with-petalinux">This</a> post gives some useful information, but  there are some pitfalls when combining the steps from <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> and <a href="https://matthewtran.dev/2021/08/getting-started-with-petalinux">this</a> post. This blogpost will loosely follow the steps from <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> post, but with some differences. Instead of uploading a bitstream using JTAG, the goal of this project is to create a bootable PetaLinux image for the EBAZ4205 board and starting it from an SD-card.</p>
<p>Before any Linux firmware can be used on the FPGA, it has to be configured to act as a CPU. This can be done in a program called <a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">Vivado</a>. When the FPGA is configured, a tool called <a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">PetaLinux</a> can be used to build Linux firmware for the FPGA. <a href="https://matthewtran.dev/2021/08/getting-started-with-petalinux/#petalinux">PetaLinux can read the hardware configuration of the FPGA and create Linux firmware for the board</a>.</p>
<p>In this project, Ubuntu 24.04 was used. Even though it is not a supported OS, it worked fine for my purposes.</p>
<h1 id="installing-vivado">Installing Vivado</h1>
<p>First, download Vivado from <a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">AMD&rsquo;s website</a>. I chose to download the web installer, since the offline installer has a size of 100GB. At the time of writing, version 2024.1 was the latest version. This is the version of Vivado that was used in this project.</p>
<p>After downloading, I chose to run the Vivado installer with superuser rights, to make sure the installed software would be able to communicate with the Xilinx JTAG device. I <em>think</em> the software can be installed and used without superuser rights, but I have not tested this.</p>
<p><img alt="Starting the Vivado installer with superuser rights" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_installation/1.png"></p>
<p>Most of the installation is straightforward; insert username and password, click &ldquo;Next&rdquo; a few times, etc. At some point in the installation, the installer will ask what software needs to be installed. Click on &ldquo;Vivado&rdquo;.</p>
<p><img alt="Select Vivado instead of Vitis" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_installation/2.png"></p>
<p>At the next screen, click &ldquo;Vivado ML standard&rdquo;.</p>
<p><img alt="Select Vivado ML standard" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_installation/3.png"></p>
<p>The installer will then ask what software modules should be installed. I chose to install everything from Vitis, just to be sure no software is missing. Under &ldquo;SoC&rsquo;s&rdquo;, all other boards, except the Z7000 series were unchecked, because I don&rsquo;t have these boards.</p>
<p><img alt="Selected software modules" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_installation/4.png"></p>
<p>At the end, the installer will (at least for me) hang at &ldquo;Generating installed device list&rdquo;. If this happens, leave it running for 10 minutes and then terminate the installer using <code>sudo xkill</code>. The reason for this, is that Ubuntu is not a supported OS.</p>
<p><img alt="The installer hangs" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_installation/5.png"></p>
<h2 id="starting-vivado-for-the-first-time">Starting Vivado for the first time</h2>
<p>If Vivado is installed in the (default) <code>/tools/Xilinx</code> directory, it can be started with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo /tools/Xilinx/Vivado/2024.1/bin/vivado
</span></span></code></pre></div><p>It is possible that application fails to start, because the correct ncurses version cannot be found. This is because Ubuntu 24.04 is newer than the supported OS and has a newer version of ncurses.</p>
<p><img alt="The version of ncurses is too new" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/1.png"></p>
<p>This ncurses error can be fixed by creating a (questionable) symbolic link:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo ln -s /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5
</span></span></code></pre></div><p>After this, Vivado should start.</p>
<h2 id="installing-the-ebaz4502-board-files">Installing the EBAZ4502 board files</h2>
<p>After starting Vivado, the board files for the EBAZ4205 board have to be added to the Vivado installation. This is as simple as copying the files into the correct folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Download board files from github</span>
</span></span><span style="display:flex;"><span>git clone https://github.com/XyleMora/EBAZ4205.git
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a &#34;board_files&#34; directory, in case it doesn&#39;t exist yet</span>
</span></span><span style="display:flex;"><span>sudo mkdir /path/to/vivado/installation/Vivado/2024.1/data/boards/board_files/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy the board files into the correct location</span>
</span></span><span style="display:flex;"><span>sudo cp -r EBAZ4205/Documents/Board<span style="color:#ae81ff">\ </span>files/ebaz4205/ /path/to/vivado/installation/Vivado/2024.1/data/boards/board_files/
</span></span></code></pre></div><h1 id="installing-petalinux">Installing PetaLinux</h1>
<p>Installing PetaLinux is more straightforward than Vivado. The installer does not have to be started with superuser rights. PetaLinux was installed using the following settings:</p>
<p><img alt="Selected software modules" src="/posts/building-a-petalinux-image-for-ebaz4205/images/petalinux_installation/1.png"></p>
<h1 id="creating-an-fpga-configuration-using-vivado">Creating an FPGA configuration using Vivado</h1>
<p>After placing the board files into the correct location, Vivado can be started. In Vivado, a minimal hardware configuration will be created. Instead of creating an AND-gate, as explained in <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">this</a> post, the FPGA will be configured as a minimal CPU.</p>
<p>First, create a new project. <a href="https://theokelo.co.ke/getting-starting-with-ebaz4205-zynq-7000">This</a> post will say that the option &ldquo;This is an extensible Vitis project&rdquo; needs to be enabled. However, for this project, this option needs to remain unchecked. Instead of uploading the bitstream via JTAG, the bitstream needs to be exported to an <code>.XSA</code> file. Vivado will refuse to export the bitstream if the project is not configured properly.</p>
<p><img alt="Leave the default options as they are" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/2.png"></p>
<p>After the project has been created, click on &ldquo;Create block design&rdquo; and give the design a nice name.</p>
<p>In the block design, Add an IP (ZYNQ7 processing system).</p>
<p><img alt="Add a new ZYNQ7 processing system" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/3.png"></p>
<p>Loop the FPGA clock output to the clock input of the processor.</p>
<p><img alt="Use the FPGA clock output as clock input for the processing system" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/4.png"></p>
<p>Then, run the block automation.</p>
<p><img alt="A minimal working example of a processing system" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/5.png"></p>
<p>After the diagram design is complete, right click the design source and select &ldquo;Create HDL wrapper&rdquo;.</p>
<p><img alt="A minimal working example of a processing system" src="/posts/building-a-petalinux-image-for-ebaz4205/images/vivado_usage/6.png"></p>
<p>Then, click on generate bitstream. This will create a hardware design. To export the hardware design, click File-&gt;Export-&gt;Export hardware and export the bitstream file.</p>
<h1 id="creating-a-linux-firmware-using-petalinux">Creating a Linux firmware using PetaLinux</h1>
<p>The exported <code>.XSA</code> file (the FPGA bitstream) can now be given to PetaLinux. PetaLinux can use this bitstream file to generate a Linux firmware for the EBAZ4205 board. To create a minimal working example of a linux firmware, the following commands were executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>source /path/to/petalinux/installation/settings.sh
</span></span><span style="display:flex;"><span>petalinux-create --type project --template zynq --name ebaz4205_petalinux_build
</span></span><span style="display:flex;"><span>cd ebaz4205_petalinux_build
</span></span><span style="display:flex;"><span>petalinux-config --get-hw-description /path/to/hardware_design.xsa
</span></span><span style="display:flex;"><span>petalinux-build
</span></span></code></pre></div><h2 id="editing-the-dtsi">Editing the <code>.dtsi</code></h2>
<p>Because the hardware design is <em>very</em> minimal, it does not know what a &ldquo;NAND storage&rdquo; is. If <code>petalinux-build</code> fails with the message <code>Label or path ps7_nand_0 not found</code>, open the <code>.dtsi</code> file and comment out the <code>&amp;ps_7_nand_0</code> block. After that, <code>petalinux-build</code> should work again.</p>
<h2 id="creating-bootbin">Creating <code>BOOT.BIN</code></h2>
<p>Although petalinux creates a lot of useful files, it didn&rsquo;t create <code>BOOT.BIN</code>. This is the <em>one</em> file that makes sure everything boots properly: It contains the bitstream, bootloader and kernel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>petalinux-config
</span></span></code></pre></div><p><code>Subsystem Hardware Settings -&gt; Flash Settings -&gt; [*] Advanced Flash Autoconfiguration</code><br>
<code>Subsystem Hardware Settings -&gt; Flash Settings -&gt; (0x1000000) size</code> (for nand-boot)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>petalinux-build
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ignore any errors about image.ub not being correctly aligned, it will not be used.</span>
</span></span><span style="display:flex;"><span>petalinux-package --boot --uboot --kernel --dtb --fsbl --format MCS --fpga --force
</span></span><span style="display:flex;"><span>bootgen -arch zynq -image images/linux/bootgen/bif -w -o images/linux/BOOT.BIN
</span></span></code></pre></div><p>Now, insert an SD card into the computer and format it as <code>FAT32</code> with a size of around 512MiB. Then, copy the required boot files onto the SD card:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cp images/linux/boot.scr /path/to/boot/partition
</span></span><span style="display:flex;"><span>sudo cp images/linux/BOOT.BIN /path/to/boot/partition
</span></span><span style="display:flex;"><span>sudo cp images/linux/uImage /path/to/boot/partition
</span></span><span style="display:flex;"><span>sudo cp images/linux/rootfs.cpio.gz.u-boot /path/to/boot/partition
</span></span></code></pre></div><p>When the SD card is inserted into the board, it should succesfully load the kernel and init system. The default login is username <code>petalinux</code>.</p>
<p><img alt="The system boots" src="/posts/building-a-petalinux-image-for-ebaz4205/images/petalinux_usage/1.png"></p>
<h2 id="todo-add-more-hardware-using-vivado">TODO: add more hardware using Vivado</h2>
<p>Until this point, the project is <em>very</em> minimal. It can start, but that is about it. Before it can be any useful, more hardware should be added to the bitstream files. This is yet to be done.</p>
<h2 id="todo-make-the-rootfs-permanent">TODO: make the rootfs permanent</h2>
<p>Petalinux boots into a minimal rootfs, that is loaded into ram. After every shutdown, any stored information is gone. Instead of directly loading the <code>rootfs.cpio.gz.u-boot</code> file, linux should mount another (ext4) partition, containing the petalinux rootfs. This is yet to be done.</p>
]]></content>
        </item>
        
        <item>
            <title>Installing linux on a q8 Allwinner A13 tablet</title>
            <link>https://tomniesse.github.io/posts/q88-tablet-allwinner-a13-embedded-linux/</link>
            <pubDate>Wed, 06 Sep 2023 13:22:00 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/q88-tablet-allwinner-a13-embedded-linux/</guid>
            <description>In this post, I will try to install linux on a q8 (Allwinner A13 based) tablet. Multiple people have already succeeded in running debian/arch on the tablet, so it must be possible.
The q8 tablet The q8 tablet is a cheap chinese android tablet that runs Android 4.1.
Looking at a page on linux-sunxi.org, I believe I have the q88 variant of the tablet. I&amp;rsquo;m not sure about this though. This blogpost will use the terms q8 and q88 interchangeably.</description>
            <content type="html"><![CDATA[<p>In this post, I will try to install linux on a q8 (Allwinner A13 based) tablet. Multiple people have already succeeded in running debian/arch on the tablet, so it must be possible.</p>
<h1 id="the-q8-tablet">The q8 tablet</h1>
<p>The <a href="https://linux-sunxi.org/Q8">q8 tablet</a> is a cheap chinese android tablet that runs Android 4.1.</p>
<p><img alt="The q8 tablet, starting Android 4.1" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/booting_android.jpg"></p>
<p>Looking at a page on <a href="https://linux-sunxi.org/Q88">linux-sunxi.org</a>, I believe I have the q88 variant of the tablet. I&rsquo;m not sure about this though. This blogpost will use the terms <code>q8</code> and <code>q88</code> interchangeably.</p>
<p><img alt="The &ldquo;about tablet&rdquo; section in Android" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/about_tablet.jpg"></p>
<p><a href="https://linux-sunxi.org/Q8">There are tablets that look similar, but have a different Allwinner SoC</a>. The one I have, happens to have an <a href="https://hackaday.com/2018/09/17/a-1-linux-capable-hand-solderable-processor/">Allwinner A13 SoC</a> inside it:</p>
<p><img alt="The insides of the tablet" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/the_inside.jpg"></p>
<p>The battery looked like it was about to explode, so I removed it. Just imagine a battery being next to the board.</p>
<h1 id="the-process">The process</h1>
<p>To create a new linux OS for the tablet, I followed a checklist:</p>
<ul>
<li>Is there a crosstool-ng defconfig for the CPU/SoC? <strong>There seems to be, <em>arm-cortex_a8-linux-gnueabi</em> exists.</strong></li>
<li>Is there a mainline u-boot defconfig for it? Is it even supported by u-boot? <strong>It seems to be supported, <em>q8_a13_tablet_defconfig</em> exists.</strong></li>
<li>Is there a mainline linux defconfig for it? It is even supported by linux? <strong>It seems to be supported, <em>sunxi_defconfig</em> exists.</strong>
<ul>
<li>If yes, does the linux source provide a <code>.dtb</code> file after I built the kernel?</li>
</ul>
</li>
<li>Is there a buildroot defconfig for it? <strong>No, buildroot doesn&rsquo;t seem to support this anchient piece of technology.</strong>
<ul>
<li>If yes, does it provide me with an <code>.img</code> file after it&rsquo;s done building? <strong>No.</strong></li>
</ul>
</li>
</ul>
<h1 id="creating-a-cross-compiler-toolchain">Creating a cross compiler toolchain</h1>
<p>Just like in some of my <a href="/posts/buildroot/">previous posts</a>, I will once again build a cross compiler toolchain.</p>
<h2 id="getting-crosstool-ng">Getting crosstool-NG</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/crosstool-ng/crosstool-ng
</span></span><span style="display:flex;"><span>./bootstrap <span style="color:#75715e"># crosstool-NG is cloned from github</span>
</span></span><span style="display:flex;"><span>./configure --enable-local
</span></span><span style="display:flex;"><span>make
</span></span></code></pre></div><h2 id="creating-a-toolchain-for-the-allwinner-a13">Creating a toolchain for the Allwinner A13</h2>
<p>The Allwinner A13 uses a Cortex A8, so the toolchain will have to support that processor type. Luckily, there is one.</p>
<p>To build the toolchain for the Allwinner A13 Soc:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng arm-cortex_a8-linux-gnueabi
</span></span><span style="display:flex;"><span>./ct-ng build
</span></span></code></pre></div><p>The folder <code>/home/$USER/x-tools/arm-cortex_a8-linux-gnueabi/</code> should now exist. To verify this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls ~/x-tools/
</span></span><span style="display:flex;"><span>arm-cortex_a8-linux-gnueabi
</span></span></code></pre></div><h1 id="building-u-boot">Building u-boot</h1>
<p>In this post, the mainline u-boot will be used.</p>
<h2 id="getting-u-boot">Getting u-boot</h2>
<p>If it works, mainline u-boot will be used. It will be downloaded directly from github:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/u-boot/u-boot.git
</span></span></code></pre></div><h2 id="building-u-boot-for-the-q8-tablet">Building u-boot for the q8 tablet:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd u-boot
</span></span><span style="display:flex;"><span>export ARCH<span style="color:#f92672">=</span>arm
</span></span><span style="display:flex;"><span>export CROSS_COMPILE<span style="color:#f92672">=</span>/home/$USER/x-tools/arm-cortex_a8-linux-gnueabi/bin/arm-cortex_a8-linux-gnueabi-
</span></span><span style="display:flex;"><span>make q8_a13_tablet_defconfig
</span></span><span style="display:flex;"><span>make menuconfig <span style="color:#75715e"># to change the boot timeout, if desired</span>
</span></span><span style="display:flex;"><span>make
</span></span></code></pre></div><p>The <code>u-boot</code> folder should now contain some more files. To verify:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls u-boot | grep u-boot
</span></span><span style="display:flex;"><span>u-boot
</span></span><span style="display:flex;"><span>u-boot.bin
</span></span><span style="display:flex;"><span>u-boot.cfg
</span></span><span style="display:flex;"><span>u-boot.dtb
</span></span><span style="display:flex;"><span>u-boot-dtb.bin
</span></span><span style="display:flex;"><span>u-boot-dtb.img
</span></span><span style="display:flex;"><span>u-boot.dtb.out
</span></span><span style="display:flex;"><span>u-boot.img
</span></span><span style="display:flex;"><span>u-boot.lds
</span></span><span style="display:flex;"><span>u-boot.map
</span></span><span style="display:flex;"><span>u-boot-nodtb.bin
</span></span><span style="display:flex;"><span>u-boot.srec
</span></span><span style="display:flex;"><span>u-boot-sunxi-with-spl.bin
</span></span><span style="display:flex;"><span>u-boot-sunxi-with-spl.map
</span></span><span style="display:flex;"><span>u-boot.sym
</span></span></code></pre></div><h1 id="building-linux">Building linux</h1>
<h2 id="getting-linux">Getting linux</h2>
<p>To obtain linux, I download the latest available version from the <a href="https://github.com/torvalds/linux/tags">releases page at github</a> (v6.4 at time of writing):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/torvalds/linux/archive/refs/tags/v6.4.tar.gz
</span></span><span style="display:flex;"><span>tar -xvf v6.4.tar.gz
</span></span></code></pre></div><h2 id="building-linux-for-the-q8-tablet">Building linux for the q8 tablet</h2>
<p>Building linux for the tablet is very straightforward and doesn&rsquo;t take very long:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd linux-6.4
</span></span><span style="display:flex;"><span>export ARCH<span style="color:#f92672">=</span>arm
</span></span><span style="display:flex;"><span>export CROSS_COMPILE<span style="color:#f92672">=</span>/home/$USER/x-tools/arm-cortex_a8-linux-gnueabi/bin/arm-cortex_a8-linux-gnueabi-
</span></span><span style="display:flex;"><span>make sunxi_defconfig
</span></span><span style="display:flex;"><span>make menuconfig <span style="color:#75715e"># for any desired changes</span>
</span></span><span style="display:flex;"><span>make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>The folder <code>arch/arm/boot</code> should now containe a file called <code>zImage</code>. To verify:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls arch/arm/boot/ | grep Image
</span></span><span style="display:flex;"><span>Image
</span></span><span style="display:flex;"><span>zImage
</span></span></code></pre></div><p>Both <code>Image</code> and <code>zImage</code>&hellip; Nice!</p>
<p>Another file that needs to be present, is the <code>.dtb</code> file. This file contains a list of hardware inside the tablet.</p>
<p>To verify:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls arch/arm/boot/dts | grep a13-q8
</span></span><span style="display:flex;"><span>sun5i-a13-q8-tablet.dtb <span style="color:#75715e"># The file I&#39;m looking for, a .dtb file</span>
</span></span><span style="display:flex;"><span>sun5i-a13-q8-tablet.dts
</span></span></code></pre></div><h1 id="creating-a-minimal-sd-card-image">Creating a minimal SD-card image</h1>
<p>If I read <a href="https://lists.denx.de/pipermail/u-boot/2016-September/266232.html">this mailing list</a> correctly, the Allwinner A13 can boot from an SD-card. For that to happen, u-boot needs to be flashed to an SD card in the correct way.</p>
<p>Instead of flashing directly to an SD card, an SD card image will be created. That image will then be flashed onto an SD card. To create an SD card image, I will use <a href="https://github.com/buildroot/buildroot/blob/master/board/licheepi/genimage.cfg">an existing genimage config from buildroot</a> and edit it, so it works for the q8 tablet.</p>
<h2 id="genimage-config">Genimage config</h2>
<p>The genimage config file (<code>genimage.cfg</code>) looks as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">image</span> <span style="color:#960050;background-color:#1e0010">boot.vfat</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">vfat</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">files</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">&#34;zImage&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">&#34;sun5i-a13-q8-tablet.dtb&#34;</span>,
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">size</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">M</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">image</span> <span style="color:#960050;background-color:#1e0010">sdcard.img</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">hdimage</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">partition</span> <span style="color:#960050;background-color:#1e0010">u-boot</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">in-partition-table</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">image</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;u-boot-sunxi-with-spl.bin&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">offset</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">K</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">size</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">530</span><span style="color:#960050;background-color:#1e0010">K</span> <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">file</span> <span style="color:#960050;background-color:#1e0010">is</span> <span style="color:#ae81ff">525</span><span style="color:#960050;background-color:#1e0010">KB</span> <span style="color:#960050;background-color:#1e0010">in</span> <span style="color:#960050;background-color:#1e0010">size</span> <span style="color:#960050;background-color:#1e0010">(measured</span> <span style="color:#960050;background-color:#1e0010">in</span> <span style="color:#960050;background-color:#1e0010">KB</span>, <span style="color:#960050;background-color:#1e0010">not</span> <span style="color:#960050;background-color:#1e0010">KiB)</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">partition</span> <span style="color:#960050;background-color:#1e0010">boot</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">partition-type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">0xC</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">bootable</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">image</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;boot.vfat&#34;</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">The</span> <span style="color:#960050;background-color:#1e0010">rootfs</span> <span style="color:#960050;background-color:#1e0010">partition</span> <span style="color:#960050;background-color:#1e0010">will</span> <span style="color:#960050;background-color:#1e0010">be</span> <span style="color:#960050;background-color:#1e0010">configured</span> <span style="color:#960050;background-color:#1e0010">later</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">partition</span> <span style="color:#960050;background-color:#1e0010">rootfs</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">partition-type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">0x83</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">image</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;rootfs.ext4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#960050;background-color:#1e0010">size</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>To build the image, I copy over all the required files and start genimage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ genimage --help
</span></span><span style="display:flex;"><span>genimage: command not found
</span></span><span style="display:flex;"><span>$ sudo apt install genimage
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>E: Unable to locate package genimage
</span></span><span style="display:flex;"><span><span style="color:#75715e"># What? Debian unstable seems to have `genimage` in it&#39;s repo&#39;s,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># why not Ubuntu?</span>
</span></span></code></pre></div><h3 id="getting-genimage">Getting genimage</h3>
<p>Genimage is not in the package repositories of ubuntu yet? Building it is straightforward enough:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/pengutronix/genimage
</span></span><span style="display:flex;"><span>cd genimage
</span></span><span style="display:flex;"><span>./autogen.sh
</span></span><span style="display:flex;"><span>./configure
</span></span><span style="display:flex;"><span>make
</span></span><span style="display:flex;"><span><span style="color:#75715e"># DO NOT EXECUTE `sudo make install`,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># IT WILL CURSE YOUR GNU/Linux INSTALLATION!</span>
</span></span><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># To use genimage, execute the local file.</span>
</span></span><span style="display:flex;"><span>./genimage/genimage --help
</span></span></code></pre></div><h3 id="building-the-image-using-genimage-attempt-2">Building the image using genimage (attempt #2)</h3>
<p>First, copy the required files into a separate folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir genimage_input
</span></span><span style="display:flex;"><span>cp u-boot/u-boot-sunxi-with-spl.bin genimage_input
</span></span><span style="display:flex;"><span>cp linux-6.4/arch/arm/boot/zImage genimage_input
</span></span><span style="display:flex;"><span>cp linux-6.4/arch/arm/boot/dts/sun5i-a13-q8-tablet.dtb genimage_input
</span></span><span style="display:flex;"><span>touch genimage_input/rootfs.ext4 <span style="color:#75715e"># create an empty rootfs file for now</span>
</span></span></code></pre></div><p>Then, tell genimage where to find everything and where to export everything to (this builds the actual image):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir genimage_output
</span></span><span style="display:flex;"><span>./genimage/genimage --config genimage.cfg --rootpath genimage_output --inputpath genimage_input
</span></span></code></pre></div><p>Genimage should have created a folder called <code>images</code>. This folder will contain a file called <code>sdcard.img</code>. To verify:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls images/
</span></span><span style="display:flex;"><span>boot.vfat  sdcard.img
</span></span></code></pre></div><h2 id="writing-the-image-to-an-sd-card">Writing the image to an SD card</h2>
<p>Writing this image to an SD card is no different from the way Raspberry Pi users would do this. Use your favourite tool for this. In <a href="/posts/buildroot/">another blog post</a> I have already explained how this process works.</p>
<h2 id="booting-the-tablet">Booting the tablet</h2>
<p>Because the tablet has an Allwinner SoC, it boots just like a PinePhone (non-pro edition): Just insert the SD card and turn it on!</p>
<p>After the tablet was powered on, u-boot immediately showed up on the screen:</p>
<p><img alt="First boot of the new OS" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/first_boot.png"></p>
<p>This tells me a few things:</p>
<ul>
<li>It has 512MiB RAM.</li>
<li>It boots from an SD card, just like a Raspberry Pi/PinePhone does. If the card is removed, it boots android again (as if nothing happened).</li>
<li>The screen works.</li>
<li>U-boot knows where the boot partition is located: it seeks it&rsquo;s environment config (<code>uboot.env</code>) in <code>mmc0:1</code>. No changes needed there.</li>
<li>The power and volume keys don&rsquo;t stop the u-boot autoboot.</li>
</ul>
<h2 id="configuring-u-boot">Configuring u-boot</h2>
<p>U-boot does not load linux yet, because it says it&rsquo;s missing a file called <code>uboot.env</code>. U-boot will not do anything if it cannot find it&rsquo;s configuration.</p>
<p>To fix <code>uboot.env</code> not being present, let&rsquo;s create a file called <code>boot.scr</code>.</p>
<p>U-boot goes through a few stages when booting:</p>
<ul>
<li>It gives some hardware information.</li>
<li>It looks for <code>uboot.env</code> (which doesn&rsquo;t exist in this case).</li>
<li>It looks for <code>boot.scr</code>, a boot script (which doesn&rsquo;t yet exist in this case).</li>
<li>It tries to boot from a network.</li>
<li>It says it failed and hangs forever.</li>
</ul>
<p>Because I have no idea where the UART-pins are yet, I cannot interact with u-boot. So, I cannot create <code>uboot.env</code>. So, <code>boot.scr</code> will be created instead.</p>
<h3 id="creating-bootscr">Creating boot.scr</h3>
<p>To create a boot script for U-boot, a text file with some script text needs to be converted.</p>
<p>For this project, a file called <code>boot.txt</code> is created, with the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>setenv bootargs root<span style="color:#f92672">=</span>/dev/mmcblk0p2 rootwait panic<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span> console<span style="color:#f92672">=</span>/dev/ttyS0,115200 console<span style="color:#f92672">=</span>tty0
</span></span><span style="display:flex;"><span>load mmc 0:1 $kernel_addr_r zImage
</span></span><span style="display:flex;"><span>load mmc 0:1 $fdt_addr_r sun5i-a13-q8-tablet.dtb
</span></span><span style="display:flex;"><span>bootz $kernel_addr_r - $fdt_addr_r
</span></span></code></pre></div><p>It is then converted to <code>boot.scr</code> using <a href="https://linux-sunxi.org/U-Boot#Configure_U-Boot">the following command</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkimage -C none -A arm -T script -d boot.txt boot.scr
</span></span></code></pre></div><p>After copying <code>boot.scr</code> to the SD card, u-boot knew what to do and stopped complaining about missing files. It then started booting linux:</p>
<p><img alt="U-boot loading linux" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/uboot_starting_kernel.png"></p>
<h3 id="linux-or-not">Linux! Or not.</h3>
<p>But after that, nothing. No kernel output, no logs, nothing. Just an empty screen.</p>
<p><img alt="Expecting linux? Too bad!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/no_linux.jpg"></p>
<p>In fact, the whole tablet just turned off.</p>
<p>Even with external power applied (faking the presence of a battery), the device turns off. This happens after about 1 second after linux is loaded.</p>
<p><img alt="Expecting linux with external power? Too bad!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/external_power.jpg"></p>
<p>This variant of the q8 tablet has it&rsquo;s wifi chip wired differently. So, as soon as the wifi chip gets powered, the tablet turns off.</p>
<p><a href="https://groups.google.com/g/linux-sunxi/c/LaLUHF3jjUo">Someone else figured out a solution to this problem</a>. Maybe that will work? The post speaks of disabling LDO3 (and thus disabling wifi and usb). To test this, the LDO3 entries in <code>u-boot/arch/arm/dts/sun5i-reference-design-tablet.dtsi</code> were removed (make sure to make a backup!).</p>
<p>After that, a new <code>.dtb</code> file was created:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make dtbs <span style="color:#75715e"># with u-boot source as $PWD</span>
</span></span></code></pre></div><p>After booting, it turns out the user was onto something. The tablet doesn&rsquo;t immediately turn off anymore. Instead, the screen only displays white lines, after which the tablet reboots.</p>
<p><img alt="Expecting image? Too bad!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/lines_in_screen.png"></p>
<h3 id="switching-to-linux-sunxi">Switching to <code>linux-sunxi</code></h3>
<p>Many years ago, there was a linux-fork called <code>linux-sunxi</code> and a u-boot fork called <code>u-boot-sunxi</code>. These forks still exist and are widely used today. In recent years, most of the the <code>linux-sunxi</code> drivers have been merged into the mainline linux kernel.</p>
<p>As seen earlier, the mainline version of u-boot supports the Allwinner A13 SoC now. The mainline linux version however, still crashes (the screen?) when it boots.</p>
<p>So, there is a chance that <code>linux-sunxi</code> works. After downloading <a href="https://github.com/linux-sunxi/linux-sunxi/releases/tag/v5.8">release version 5.8</a> (latest version at time of writing) and repeating exactly the same steps as before, it worked! The linux kernel logs were shown:</p>
<p><img alt="Linux logs being displayed on the screen!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/linux_logs.png"></p>
<h2 id="can-linux-mount-a-rootfs-and-start-an-init">Can Linux mount a rootfs and start an init?</h2>
<p>Linux now starts and prints logs to the tablet&rsquo;s display, but it panics. This was expected, since the <code>genimage.cfg</code> does not yet contain a rootfs configuration.</p>
<p>To test if any rootfs can be mounted at all, a second partition was added to the SD card, containing a <a href="https://sd-card-images.johang.se/boards/a13_olinuxino.html">rootfs from the A13 OLinuXino board</a>. Although the rootfs is not made for this tablet, it displayed the Debian CLI login:</p>
<p><img alt="Debian CLI login being shown" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/debian_login.jpg"></p>
<p>The same trick worked for <a href="https://archlinuxarm.org/platforms/armv7/allwinner/a10-olinuxino-lime">Arch</a> as well:</p>
<p><img alt="Arch CLI login being shown" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/arch_login.png"></p>
<h1 id="a-rootfs-with-a-gui">A rootfs with a GUI</h1>
<p>All of these CLI logins are fun and all, but how about something with graphics?</p>
<p>Ubuntu MATE has a <a href="https://releases.ubuntu-mate.org/jammy/armhf/">32-bit armhf image</a>, meant for Raspberry Pi&rsquo;s. Merging Ubuntu MATE&rsquo;s userland and <code>linux-sunxi</code>, reveals that the tablet can run a desktop.</p>
<p><img alt="Ubuntu MATE loading" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/ubuntu_mate_loading.jpg"></p>
<p>Although the tablet is slow, it eventually (after about 4 to 5 minutes) started the Ubuntu MATE setup:</p>
<p><img alt="Ubuntu MATE welcome" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/ubuntu_mate_welcome.jpg"></p>
<h2 id="why-does-this-work">Why does this work?</h2>
<p>Why does an OS, created for the Raspberry Pi, work on this tablet? The tablet and the Raspberry Pi 2 share a similar architecture: ARMv7. So, both SoC&rsquo;s are able to run 32 bit ARM code.</p>
<p>Also, the <a href="https://wiki.installgentoo.com/index.php/Interjection">copypasta</a> is correct:</p>
<blockquote>
<p><em>What you&rsquo;re referring to as Linux, is in fact, GNU/Linux. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called &ldquo;Linux&rdquo;, and many of its users are not aware that it is basically the GNU system, developed by the GNU Project.</em></p>
</blockquote>
<p>Linux is just a kernel. When people talk about &ldquo;linux&rdquo;, they really mean the (GNU) userland binaries that they are interacting with.</p>
<p>You can get away with a lot of &ldquo;ugly&rdquo; solutions to create an OS (like the one described in this post), because &ldquo;Linux&rdquo; is not an entire OS. This project uses <a href="https://github.com/linux-sunxi/linux-sunxi">linux-sunxi</a> instead of <a href="https://github.com/raspberrypi/linux">raspberrypi/linux</a>, but the userland binaries remain the same. They will work with many versions of linux (the kernel!).</p>
<p>However, this method should <em>not</em> be used in production. In a production environment, just use yocto or buildroot to create a fully compatible image for the hardware.</p>
<h1 id="the-touchscreen-doesnt-work">The touchscreen doesn&rsquo;t work</h1>
<p>The tablet did not respond to the touch screen when clicked or dragged. Looking at <code>u-boot/arch/arm/dts/sun5i-reference-design-tablet.dtsi</code>, it quickly became clear why this is the case:</p>
<p><img alt="The touchscreen is disabled" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/touchscreen_disabled.png"></p>
<p>The touch screen is disabled, because these tablets <a href="https://linux-sunxi.org/Touchscreen">often have different types of touch screens</a>. The tablet I have says <code>FYX00109</code> the cable.</p>
<h2 id="figuring-out-which-touch-screen-the-tablet-has">Figuring out which touch screen the tablet has</h2>
<p>To figure out which screen the tablet uses, Android 4.1 was started again.</p>
<p>Inside an adb shell, <code>lsmod</code> will give a list of active linux modules:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>root@android:/ # lsmod
</span></span><span style="display:flex;"><span>8188eu 784805 0 - Live 0xbf160000
</span></span><span style="display:flex;"><span>sun4i_vibrator 2459 0 - Live 0xbf15c000
</span></span><span style="display:flex;"><span>rtl8150 10305 0 - Live 0xbf155000
</span></span><span style="display:flex;"><span>mcs7830 7581 0 - Live 0xbf14f000
</span></span><span style="display:flex;"><span>qf9700 9152 0 - Live 0xbf148000
</span></span><span style="display:flex;"><span>asix 24601 0 - Live 0xbf13c000
</span></span><span style="display:flex;"><span>cedarx 9351 0 - Live 0xbf135000
</span></span><span style="display:flex;"><span>mali 151260 4 - Live 0xbf103000
</span></span><span style="display:flex;"><span>da311 29089 0 - Live 0xbf0f6000
</span></span><span style="display:flex;"><span>ump 49518 9 mali, Live 0xbf0e2000
</span></span><span style="display:flex;"><span>gslX680 94888 0 - Live 0xbf0c5000
</span></span><span style="display:flex;"><span>sun5i_csi0 30454 0 - Live 0xbf0b8000
</span></span><span style="display:flex;"><span>gc0329 18132 0 - Live 0xbf09e000
</span></span><span style="display:flex;"><span>gc0309 17436 0 - Live 0xbf095000
</span></span><span style="display:flex;"><span>siv121du 18993 0 - Live 0xbf08c000
</span></span><span style="display:flex;"><span>siv121d 14194 0 - Live 0xbf084000
</span></span><span style="display:flex;"><span>gc0308 18464 0 - Live 0xbf07b000
</span></span><span style="display:flex;"><span>camera_auto_detect 14914 7 sun5i_csi0,gc0329,gc0309,siv121du,siv121d,gc0308, Live 0xbf04f000
</span></span><span style="display:flex;"><span>videobuf_dma_contig 6251 1 sun5i_csi0, Live 0xbf04a000
</span></span><span style="display:flex;"><span>videobuf_core 20242 2 sun5i_csi0,videobuf_dma_contig, Live 0xbf040000
</span></span><span style="display:flex;"><span>nand 225024 10 - Live 0xbf000000
</span></span></code></pre></div><p>To figure out which driver is responsible for the touch screen, I started to unload modules (using <code>rmmod</code>) until the touch screen didn&rsquo;t respond anymore. In this tablet, it was the <code>gslX680</code> module. This means, <a href="https://linux-sunxi.org/Touchscreen">according to the linux-sunxi.org website</a>, that this tablet has a Silead gsl1680 touch screen.</p>
<p>According to the <a href="http://dl.linux-sunxi.org/touchscreen/GSL1680.pdf">datasheet</a> for the touch screen, the <code>reg</code> entry in de <code>.dts</code> files has to be set to <code>0x40</code>. Let&rsquo;s edit <code>u-boot/arch/arm/dts/sun5i-reference-design-tablet.dtsi</code> again, <a href="http://lists.infradead.org/pipermail/linux-arm-kernel/2016-October/464186.html">to enable the <code>gsl1680</code> driver</a>:</p>
<p><img alt="The touchscreen is enabled" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/touchscreen_enabled.png"></p>
<p>A <code>compatible</code> entry was added to tell linux that the <code>gsl1680</code> driver will work with the touch screen in the tablet. Also, the <code>status</code> was changed from <code>disabled</code> to <code>okay</code>. The rest of the <code>.dts</code> file was left as-is.</p>
<p>Also, a kernel module was enabled (<a href="https://www.linuxquestions.org/questions/linux-from-scratch-13/lfs-direct-firmware-load-failed-error-2-a-4175587686/#post5594478">as a module, not built into the kernel!</a>):</p>
<p><img alt="The touchscreen driver is enabled" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/silead_enabled.png"></p>
<p>And sure enough, in the linux logs, the driver can find the touch screen (please excuse the poor camera image, I still haven&rsquo;t taken the time to find the UART pins on this thing):</p>
<p><img alt="The touchscreen is found" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/touchscreen_found.png"></p>
<p>However, as seen in the logs, it requires a file called <code>silead/gsl1680.fw</code>. The original android OS uses a similar firmware file. Luckily, the firmware for this touch screen can be found <a href="https://github.com/onitake/gsl-firmware/blob/master/firmware/linux/silead/gsl1680-a082-q8-700.fw">on github</a>. Renaming this firmware file to <code>gsl1680.fw</code> and placing it in <code>&lt;sdcard&gt;/lib/firmware/silead/</code> resulted in the driver being loaded correctly. After that, the cursor moved!</p>
<p><img alt="The cursor moved when the screen was touched" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/the_cursor_moved.jpg"></p>
<p>The cursor only seems to stay in the upper left corner though, so some sort of calibration must be applied before it&rsquo;s usable.</p>
<h2 id="calibrating-the-screen">Calibrating the screen</h2>
<p>To <a href="https://wiki.ubuntu.com/X/InputCoordinateTransformation">manually calibrate the touch screen</a>, a <a href="https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations">transformation matrix</a> can be applied to the touch screen input. This is usually done by creating an X.org configuration file. On the internet, people specify names of their input devices. But, I have no idea what this touch screen is called. So, this config file just calibrates all touch screens.</p>
<p>The <code>&lt;SD card rootfs&gt;/etc/X11/xorg.conf.d/99-touchscreen.conf</code> file contains the following configuration:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">Section &#34;InputClass&#34;
	Identifier &#34;evdev touchscreen catchall&#34;
	MatchIsTouchscreen &#34;on&#34;
	MatchDevicePath &#34;/dev/input/event*&#34;
	Driver &#34;evdev&#34;
	Option &#34;TransformationMatrix&#34; &#34;4 0 0 0 7 0 0 0 1&#34;
EndSection
</code></pre><h1 id="distro-hopping">Distro-hopping</h1>
<h2 id="ubuntu-mate">Ubuntu MATE</h2>
<p>After the touch screen was calibrated, the Ubuntu MATE installer would go to the next page. The setup process went fine, until a username had to be entered. Ubuntu MATE doesn&rsquo;t have a pop-up keyboard, like android does. So, this became an impossible task:</p>
<p><img alt="Expecting keyboard? Too bad!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/no_keyboard.jpg"></p>
<p>It seems that in this version of Ubuntu MATE, <a href="https://ubuntu-mate.community/t/solved-suggestion-on-screen-keyboard-for-ubuntu-mate-installation/1868/6">it is impossible to enable the on screen keyboard during setup</a>.</p>
<h2 id="raspberry-pi-os">Raspberry Pi OS</h2>
<p>As much as I would have liked to run Ubuntu MATE on the tablet, the OS would not let itself be configured, not even when booted from a Raspberry Pi 3 (X.org did not start for whatever reason). Raspberry Pi OS might work better, since it&rsquo;s pre-configured. This way, the OS is already configured by <code>rpi-imager</code>. It should boot straight to the desktop.</p>
<p>And so it does, but something is off:</p>
<p><img alt="Expecting menu bar? Too bad!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/pi_os_desktop.jpg"></p>
<p>The top bar, along with the application menu is missing. It appeared, then crashed and disappeared forever.</p>
<p>The only application  can be started is the file manager:</p>
<p><img alt="At least the file manager works" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/pi_os_pcmanfm.jpg"></p>
<p>Maybe another userland works better&hellip;</p>
<h2 id="kali-linux">Kali linux</h2>
<p>As much as I would have liked to run Ubuntu MATE or Raspberry Pi OS on the tablet, both desktops are not usable. So, the next userland is kali linux. Maybe this GUI is usable.</p>
<p>And so it is! Finally, an OS that understands my needs! It has an option for an on screen keyboard everywhere!</p>
<h3 id="login-screen">Login screen</h3>
<p><img alt="Kali linux login screen with on screen keyboard" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/kali_login.jpg"></p>
<h3 id="desktop">Desktop</h3>
<p><img alt="Kali linux desktop" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/kali_desktop.jpg"></p>
<h3 id="screenshots-from-the-device-itself">Screenshots from the device itself</h3>
<h4 id="notepad-and-keyboard">Notepad and keyboard</h4>
<p>With the convinience of an on screen keyboard, screenshots can be made on the device!</p>
<p><img alt="Kali linux desktop" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/kali_desktop_screenshot.png"></p>
<h4 id="firefox">Firefox</h4>
<p>Starting firefox slows the tablet down very much, to the point where it&rsquo;s almost unusable.</p>
<p><img alt="Firefox on a q8 tablet" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/kali_firefox.png"></p>
<h4 id="task-manager">Task manager</h4>
<p>As seen in task manager, the SoC has some troubles with a &ldquo;modern&rdquo; OS. The task manager program used around 30% of the CPU. Another 20% of the CPU was used by the screenshot program.</p>
<p><img alt="~30% cpu usage, only by opening task manager" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/kali_taskmanager.png"></p>
<p>I did not expect it to use so little memory. Nowadays, RAM quickly goes up to 1GiB or more.</p>
<h2 id="video-playback">Video playback</h2>
<p>To see how well the tablet can play a video file, I downloaded a 360p version of the famous music video. Below is a <code>gif</code> of how that went (the tablet did it&rsquo;s best):</p>
<p><img alt="I tried so hard, and got so far, but in the end, it doesn&rsquo;t even matter!" src="/posts/q88-tablet-allwinner-a13-embedded-linux/images/video_playback.gif"></p>
<h1 id="conclusion">Conclusion</h1>
<p>It is possible to run linux(-sunxi) and a graphical desktop on an old Allwinner A13 tablet, but it&rsquo;s very slow.</p>
<p>Also, this tablet variant has a problem where it shuts down as soon as the wifi card is enabled. In the future I might try to fix this issue. But, seeing how slow the tablet is, I think it&rsquo;s not really worth the effort.</p>
<h1 id="attachments">Attachments</h1>
<p>I will not share any SD card images, but I will leave the <a href="/posts/q88-tablet-allwinner-a13-embedded-linux/attachments/genimage.cfg"><code>genimage.cfg</code></a> config file and the <a href="/posts/q88-tablet-allwinner-a13-embedded-linux/attachments/create_image.sh"><code>create_image.sh</code></a> script here. Richt clicking the links and choosing <code>save as</code> will probably work. All the (other) required input files will not be shared.</p>
]]></content>
        </item>
        
        <item>
            <title>Daisy chained routers and IPv6 (NAT66)</title>
            <link>https://tomniesse.github.io/posts/nat66/</link>
            <pubDate>Sun, 04 Jun 2023 11:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/nat66/</guid>
            <description>For a very specific problem, I needed to daisy chain some routers. This is easily done with IPv4, since it has has NAT. But what about IPv6?
The issue I recently bought a cheap second hand router. I did this to split the incoming WAN-connection into two LAN-connections. One LAN-connection goes to a separate network with a specific purpose. The other LAN-connection serves as a WAN for another router. The second router is not mounted near a fuse box and can serve much better wifi to the entire house.</description>
            <content type="html"><![CDATA[<p>For a very specific problem, I needed to daisy chain some routers. This is easily done with IPv4, since it has has NAT. But what about IPv6?</p>
<h1 id="the-issue">The issue</h1>
<p>I recently bought a cheap second hand router. I did this to split the incoming WAN-connection into two LAN-connections. One LAN-connection goes to a separate network with a specific purpose. The other LAN-connection serves as a WAN for another router. The second router is not mounted near a fuse box and can serve much better wifi to the entire house.</p>
<p><a href="/posts/nat66/images/topology_block_diagram.png"><img alt="Topology block diagram" src="/posts/nat66/images/topology_block_diagram.png"></a></p>
<p>Using this topology, IPv4 worked almost automatically. However, IPv6 did not. For router 2, this does not matter that much. For router 3 however, it does matter (I want IPv6 when connecting to wifi). Many answers online involve calling the ISP and asking for another IPv6 prefix. I wasn&rsquo;t going to do this.</p>
<h1 id="the-solution">The solution</h1>
<p>Turns out, IPv6 masquerading exists. And it works just like IPv4&rsquo;s NAT. If both routers could just NAT all IPv6 traffic, I consider my problem solved!</p>
<h2 id="router-1-settings">Router 1 settings</h2>
<p>In router 1, I set a LAN IPv6 as follows:</p>
<p><a href="/posts/nat66/images/router1_ipv6_lan_settings.png"><img alt="Router 1 settings" src="/posts/nat66/images/router1_ipv6_lan_settings.png"></a></p>
<h2 id="router-3">Router 3</h2>
<p>In router 3, an OpenWRT router, I changed a few settings (as per the <a href="https://openwrt.org/docs/guide-user/network/ipv6/ipv6.nat6">OpenWRT wiki</a>):</p>
<p>In Network-&gt;Firewall-&gt;Zones-&gt;WAN-&gt;Advanced settings, I enabled IPv6 masquerading. This enables NAT6 and causes all IPv6 traffic to be translated, just like with IPv4.</p>
<p><a href="/posts/nat66/images/router3_firewall_setting.png"><img alt="Router 3 firewall setting" src="/posts/nat66/images/router3_firewall_setting.png"></a></p>
<p>In Network-&gt; Interfaces-&gt;wan6-&gt;Advanced Settings I disabled IPv6 source routing:</p>
<p><a href="/posts/nat66/images/router3_ipv6_source_routing.png"><img alt="Router 3 source routing setting" src="/posts/nat66/images/router3_ipv6_source_routing.png"></a></p>
<p>Then, some extra settings were modified to make DHCPv6 work.</p>
<p>In Network-&gt;Interfaces-&gt;lan-&gt;DHCP Server-&gt;IPv6 Settings, I make sure that router3 advertises itself as a DHCPv6 server:</p>
<p><a href="/posts/nat66/images/router3_dhcp_ipv6_settings.png"><img alt="Router 3 DHCP IPv6 settings" src="/posts/nat66/images/router3_dhcp_ipv6_settings.png"></a></p>
<p>In Network-&gt;Interfaces-&gt;lan-&gt;DHCP Server-&gt;IPv6 Settings, I make sure that the Router Advertisement (RA) settings are correctly set up. I enabled SLAAC, made sure that the <code>M</code>-flag is enabled in the RA-flags and that default router is on <code>on available prefix</code>. This way, router 3 will always hand out IPv6 addresses, even if there is no connection to router 1. The settings look as follows:</p>
<p><a href="/posts/nat66/images/router3_IPv6_RA_settings.png"><img alt="Router 3 IPv6 RA settings" src="/posts/nat66/images/router3_IPv6_RA_settings.png"></a></p>
<p>Finally, to make sure router 3 routes all IPv6 traffic to router 1, I set up a static IPv6 route. This is done in Network-&gt;Routing-&gt;Static IPv6 Routes:</p>
<p><a href="/posts/nat66/images/router3_static_ipv6_route.png"><img alt="Router 3 static IPv6 route" src="/posts/nat66/images/router3_static_ipv6_route.png"></a></p>
<p>When configured, the list of static routes looks as follows:</p>
<p><a href="/posts/nat66/images/router3_static_ipv6_routes.png"><img alt="Router 3 static IPv6 routes" src="/posts/nat66/images/router3_static_ipv6_routes.png"></a></p>
<h2 id="debugging">Debugging</h2>
<p>When pinging websites using IPv6, I got a connection. However, if it doesn&rsquo;t work, <code>traceroute</code> can help figure out where the problem is:</p>
<ul>
<li>No DNS? In router 3, manually set a DNS address in DHCPv6 settings and see if things work now.</li>
<li>Transmit failure? Router 3&rsquo;s DHCPv6 settings need some changes.</li>
<li>Timeout? Router 3 doesn&rsquo;t have a (properly configured) IPv6 static route or router 1 doesn&rsquo;t forward the packets (properly).</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Hosting a lokinet SNApp from inside a docker container</title>
            <link>https://tomniesse.github.io/posts/lokinet-inside-docker/</link>
            <pubDate>Fri, 28 Apr 2023 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/lokinet-inside-docker/</guid>
            <description>What is lokinet? Like the tor project, lokinet is a decentralized onion router that routes (all) traffic through multiple other servers. The nice thing about it is, that it runs on a lower network layer than tor. This makes lokinet able to route traffic using any network protocol, instead of sending everything over TCP. A good example of this is SSH. If a lokinet server is hosting an SSH or VPN service, it can be accessed without the need for port forwarding.</description>
            <content type="html"><![CDATA[<h1 id="what-is-lokinet">What is lokinet?</h1>
<p>Like the tor project, lokinet is a decentralized onion router that routes (all) traffic through multiple other servers. The nice thing about it is, that it runs on a lower network layer than tor. This makes lokinet able to route traffic using any network protocol, instead of sending everything over TCP. A good example of this is SSH. If a lokinet server is hosting an SSH or VPN service, it can be accessed without the need for port forwarding.</p>
<h1 id="goal">Goal</h1>
<p>The goal of this project is to host a website (SNApp) on lokinet using a docker image. This project keeps it simple, using only a webserver. However, anything that can be hosted, can be hosted on lokinet.</p>
<h1 id="previous-work">Previous work</h1>
<p>This blogpost is based on <a href="/posts/docker/">another post</a> in which docker and docker-compose are explained.</p>
<h1 id="building-a-lokinet-server-container">Building a lokinet server container</h1>
<p>Below is a <code>Dockerfile</code> that creates a container with lokinet inside.<br>
The goal of this container is to provide a lokinet service with a permanent <code>.loki</code> address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> ubuntu:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt update<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt upgrade<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;resolvconf resolvconf/linkify-resolvconf boolean false&#34;</span> | debconf-set-selections<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt install curl lsb-release resolvconf dnsutils --yes<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -so /etc/apt/trusted.gpg.d/oxen.gpg https://deb.oxen.io/pub.gpg<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;deb https://deb.oxen.io `lsb_release -sc` main&#34;</span> &gt; /etc/apt/sources.list.d/oxen.list<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt update<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt install lokinet --yes<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chown _lokinet:_loki /etc/loki -R<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> /usr/bin/lokinet -g<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> lokinet-bootstrap<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chown _lokinet:_loki /etc/loki -R<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;#!/bin/bash&#34;</span> &gt; /get_loki_address.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;host -t cname localhost.loki 127.3.2.1&#34;</span> &gt;&gt; /get_loki_address.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /get_loki_address.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cp /etc/loki/lokinet.ini /<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;#!/bin/bash&#34;</span> &gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;cp -n /lokinet.ini /etc/loki/&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;cp -n /lokinet.ini /var/lib/lokinet/&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;/usr/bin/lokinet -g&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;sed -ie &#39;s|#keyfile=|keyfile=/var/lib/lokinet/snappkey.private|g&#39; /etc/loki/lokinet.ini&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;sed -ie &#39;s|#keyfile=|keyfile=/var/lib/lokinet/snappkey.private|g&#39; /var/lib/lokinet/lokinet.ini&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;rm -rf /var/lib/lokinet/nodedb/&#34;</span> &gt;&gt; start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;rm -rf /var/lib/lokinet/profiles.dat&#34;</span> &gt;&gt; start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;/usr/bin/lokinet&#34;</span> &gt;&gt; /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /start.sh<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/start.sh&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><h1 id="configuring-docker-compose">Configuring docker-compose</h1>
<p>Below is a <code>docker-compose.yml</code> file that configures 3 services:</p>
<ul>
<li><code>lokinet</code>: Using the above <code>Dockerfile</code>, a lokinet service will allow access to the <code>.loki</code> address.</li>
<li><code>tiredofit/nginx-php-fpm</code>: to run a webserver, which can host a simple website.</li>
<li><code>containrrr/watchtower</code>: to automatically keep all containers up to date.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">lokinet</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">lokinet</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">privileged</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tty</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">network_mode</span>: <span style="color:#ae81ff">host</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tmpfs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/run</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/tmp</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./lokinet/var_lib_lokinet:/var/lib/lokinet&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./lokinet/etc_loki:/etc/loki&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">php-nginx</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">php-nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">tiredofit/nginx-php-fpm</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;80:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./webroot:/www/html&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">watchtower</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containrrr/watchtower</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">watchtower</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">command</span>: <span style="color:#ae81ff">lokinet php-nginx</span>
</span></span></code></pre></div><p>In the <code>docker-compose.yml</code> file, the <code>network_mode</code> for the lokinet container is set to <code>host</code>. This will cause lokinet to have direct access to the host OS&rsquo;s network. Now lokinet can talk to all other containers, as if it was running directly on the host OS.</p>
<h1 id="running-the-containers">Running the containers</h1>
<p>When running the command <code>docker-compose up --build</code>, all the configured containers will start running.</p>
<h1 id="getting-the-loki-address">Getting the loki address</h1>
<p>The <code>lokinet</code> container contains a script that can give the current <code>.loki</code> address. First, access the container using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker exec -it &lt;container id&gt; /bin/bash
</span></span></code></pre></div><p>Then, from inside the container, execute the script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/get_loki_address.sh
</span></span></code></pre></div><p>Now the <code>.loki</code> address will be shown. If a client connects to this <code>.loki</code> address, the website will be shown.</p>
<h1 id="debugging">Debugging</h1>
<p>If the <code>.loki</code> address cannot be reached after a few minutes, try removing the <code>./lokinet/var_lib_lokinet/nodedb</code> directory and the <code>./lokinet/var_lib_lokinet/profiles.dat</code> and restart the container(s).</p>
<h1 id="conclusion">Conclusion</h1>
<p>It is possible to host a website on lokinet using docker. A <code>Dockerfile</code> and <code>docker-compose.yml</code> were the only configuration files needed. To host other kinds of services on lokinet, just add another container in the <code>docker-compose.yml</code> file and it will be hosted on lokinet.</p>
]]></content>
        </item>
        
        <item>
            <title>Printing ABS using an Ender 3 (v1), without an enclosure</title>
            <link>https://tomniesse.github.io/posts/ender3-abs-printing/</link>
            <pubDate>Sun, 09 Apr 2023 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/ender3-abs-printing/</guid>
            <description>Introduction When looking for a guide on how to print ABS using a cheap printer, people usually say &amp;ldquo;it&amp;rsquo;s impossible&amp;rdquo;, &amp;ldquo;it requires a printer enclosure&amp;rdquo; or &amp;ldquo;you just have to remove the fans&amp;rdquo;.
I disagree with all those statements. In this youtube video, someone put duct tape on their Ender 3 and was able to print ABS just fine.
And if someone else can do it, it must be possible.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>When looking for a guide on how to print ABS using a cheap printer, people usually say &ldquo;it&rsquo;s impossible&rdquo;, &ldquo;it requires a printer enclosure&rdquo; or &ldquo;you just have to remove the fans&rdquo;.<br>
I disagree with all those statements. In <a href="https://www.youtube.com/watch?v=wjSpVN19x7A">this youtube video</a>, someone put duct tape on their Ender 3 and was able to print ABS just fine.<br>
And if someone else can do it, it must be possible.</p>
<p>This page documents the adventure of ABS printing using a 3D printer without an enclosure.</p>
<h1 id="airflow-and-duct-tape">Airflow and duct tape</h1>
<p>The main issue with ABS printing on an Ender 3 is that the cooling fan (not the print cooling fan) blows air down, onto the print.<br>
If the air is directed away from the print, ABS will print just fine.</p>
<p>After applying duct tape to my own printer, I got similar results: it produced a good print!<br>
However, it also melted all the duct tape. This made a big mess.</p>
<p><a href="/posts/ender3-abs-printing/images/ducttape_solution.jpg"><img alt="The duct tape solution" src="/posts/ender3-abs-printing/images/ducttape_solution.jpg"></a></p>
<h1 id="adding-a-new-airflow-cover-to-the-printer">Adding a new airflow cover to the printer</h1>
<p>Because duct tape was not a long term solution, I created a new part for the Ender 3 v1. The stl file is <a href="https://www.thingiverse.com/thing:5631450">hosted on thingiverse</a>.</p>
<p>The designed cover was first printed in PLA. This went as well as one would expect: it melted pretty quickly during printing.<br>
It held up just long enough to print another cover (made out of ABS).</p>
<p><a href="/posts/ender3-abs-printing/images/pla_vs_abs_cover.jpg"><img alt="The PLA and ABS airflow covers" src="/posts/ender3-abs-printing/images/pla_vs_abs_cover.jpg"></a></p>
<p>The ABS cover (on the right) has been attached to my printer ever since, and is doing just fine! It doesn&rsquo;t deform like the PLA cover did.</p>
<h1 id="differences-between-pla-and-abs">Differences between PLA and ABS</h1>
<p>ABS is a little different when it comes to printing. Here&rsquo;s my experience with it so far:</p>
<h4 id="pros">Pros</h4>
<ul>
<li>As long as the airflow cover is on, the ambient temperature can be as low as 17°C. Prints will still come out just fine</li>
<li>As long as the print bed is hot (110°C, the maximum bed temperature for the Ender 3 v1), the ABS sticks to the bed very well.<br>
Just like with small PLA prints though, a brim may be required.</li>
</ul>
<h4 id="cons">Cons</h4>
<ul>
<li>The &ldquo;small perimeter speed&rdquo; and &ldquo;overhang speed&rdquo; need some tuning before prints start to look well.</li>
<li>When printing very fast, ABS doesn&rsquo;t always hold it&rsquo;s shape.<br>
Sometimes, walls will &ldquo;move inwards&rdquo;. This then creates a &ldquo;)(&quot;-shape instead of a &ldquo;||&quot;-shape.<br>
The only solution I have found so far is to print more slowly.</li>
<li>When printing large ABS prints, warping and delamination may occur.</li>
</ul>
<h1 id="printing-a-benchy-using-abs">Printing a benchy using ABS</h1>
<p>To test how well the airflow cover would work, I printed a benchy. It came out looking very well, but the roof was a little weak due to slight delamination.<br>
This probably had to do with cooling, since the rest of the boat was just fine. The below image shows the Ender 3 printing a benchy out of ABS.<br>
No enclosure was used and the ambient temperature was around 17°C that day.</p>
<p><a href="/posts/ender3-abs-printing/images/benchy.jpg"><img alt="Printing a benchy without a brim" src="/posts/ender3-abs-printing/images/benchy.jpg"></a></p>
<h1 id="summary">Summary</h1>
<p>Printing ABS is possible using an Ender 3 v1. It&rsquo;s not perfect, but still very doable. The delamination is still an issue, but I think it can be fixed.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating an embedded OS that runs a DOS game</title>
            <link>https://tomniesse.github.io/posts/buildroot-dune-dynasty/</link>
            <pubDate>Tue, 21 Dec 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/buildroot-dune-dynasty/</guid>
            <description>Introduction This page explains how the game &amp;ldquo;Dune Dynasty II&amp;rdquo; can be ran on an embedded linux OS. The OS is created using buildroot.
All required configurations and compile-commands are documented on this page.
The below image shows the game (and embedded OS) running.
Previous work This post is based on another post in which a basic embedded OS is created. However, the toolchain used uClibc as C library, which will not work here.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This page explains how the game &ldquo;Dune Dynasty II&rdquo; can be ran on an embedded linux OS. The OS is created using <a href="https://buildroot.org">buildroot</a>.<br>
All required configurations and compile-commands are documented on this page.</p>
<p>The below image shows the game (and embedded OS) running.</p>
<p><a href="/posts/buildroot-dune-dynasty/images/game.jpg"><img alt="Buildroot OS running Dune Dynasty II" src="/posts/buildroot-dune-dynasty/images/game.jpg"></a></p>
<h1 id="previous-work">Previous work</h1>
<p>This post is based on <a href="/posts/buildroot/">another post</a> in which a basic embedded OS is created. However, the toolchain used uClibc as C library, which will not work here. This is why a new toolchain and Buildroot OS will be created. It is assumed that the previous post was followed and that all the tools and source code are already downloaded.</p>
<p>The previous post showed how to make a basic OS (using crosstool-NG, U-boot and Buildroot), which did very little of value. It just started a shell and that was it.<br>
Not very interesting.</p>
<p>In this post, the goals are as follows:</p>
<ul>
<li>Make a buildroot OS containing Allegro5 and Dune Dynasty</li>
<li>Compile the kernel without using Buildroot</li>
<li>Make the OS start as fast as possible</li>
</ul>
<h1 id="creating-a-new-toolchain">Creating a new toolchain</h1>
<p>For this OS, a new toolchain using glibc will be used. This is because uClibc creates lots of segfaults (probably while resolving libraries).</p>
<h2 id="creating-a-new-toolchain-configuration">Creating a new toolchain configuration</h2>
<p>First, a new toolchain configuration is created inside the crosstool-NG folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng distclean
</span></span><span style="display:flex;"><span>./ct-ng aarch64-rpi4-linux-gnu
</span></span></code></pre></div><h2 id="making-a-few-changes-to-the-toolchain-configuration">Making a few changes to the toolchain configuration</h2>
<p>Then, the toolchain options are changed using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng menuconfig
</span></span></code></pre></div><p>The following options were changed:</p>
<ul>
<li>Under <code>C compiler</code>, the option <code>Version of gcc</code> is set to the second to latest option (<code>10.3.0</code> at time of writing)</li>
<li>Under <code>Operating System</code>, the option <code>Version of linux</code> is set to <code>5.10.79</code> (this is the version of linux that will be compiled later in this post)</li>
<li>Under <code>Debug facilities</code>, the option <code>gdb</code> is disabled.</li>
</ul>
<h2 id="building-the-new-toolchain">Building the new toolchain</h2>
<p><em>If <code>~/x-tools/</code> already contains a toolchain with the same name; move, rename or delete that toolchain. If it is not dealt with, the wrong linux headers might still be present and the target OS will fail to run. crosstool-NG will not build a shiny new toolchain automatically.</em></p>
<p>To then build the new toolchain, execute the build command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng build -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><h1 id="creating-a-new-buildroot-os">Creating a new Buildroot OS</h1>
<p>The previous post describes how to make a Buildroot OS using uClibc. Because this does not apply here anymore, a completely new Buildroot OS will be created.</p>
<h2 id="creating-a-new-configuration">Creating a new configuration</h2>
<p>Within Buildroot, using <code>make menuconfig</code>, the following options are changed to create a new OS:</p>
<ul>
<li>Under <code>Build options</code>, the option <code>Enable compiler cache</code> is enabled</li>
<li>Under <code>Build options</code>, the option <code>RELR0 protection</code> is set to <code>Partial</code></li>
<li>Under <code>Build options</code>, the option <code>Stack Smashing Protection</code> is set to <code>None</code></li>
<li>Under <code>Bootloaders</code>, all the options are disabled (the bootloader will be compiled manually)</li>
<li>Under <code>Kernel</code>, the option <code>Linux Kernel</code> is disabled (the kernel will be compiled manually)</li>
<li>Under <code>Filesystem images</code>, the option <code>ext2/3/4 root filesystem</code> is disabled</li>
<li>Under <code>Filesystem images</code>, the option <code>tar the root filesystem</code> is enabled, along with the <code>Compression method</code> set to <code>gzip</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain type</code> is set to <code>External toolchain</code> (this post uses a toolchain built by crosstool-NG)</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain</code> is set to <code>Custom toolchain</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain origin</code> is set to <code>Pre-installed toolchain</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain path</code> is set to <code>/home/&lt;YOUR_USERNAME_GOES_HERE&gt;/x-tools/aarch64-rpi4-linux-gnu</code> (the path has to be absolute and may not contain <code>~/</code> or <code>/home/$USER/</code>!).</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain prefix</code> is set to <code>aarch64-rpi4-linux-gnu</code></li>
<li>Under <code>Toolchain</code>, the option <code>External toolchain C library</code> is set to <code>glibc/eglibc</code></li>
<li>Under <code>Toolchain</code>, the option <code>External toolchain gcc version</code> is set to <code>10.x</code> (matching the version from the toolchain)</li>
<li>Under <code>Toolchain</code>, the option <code>External toolchain kernel headers series</code> is set to <code>5.10.x</code> (matching the version from the toolchain)</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has locale support?</code> is enabled</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has threads support?</code> is enabled, along with the two extra options for threads support</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has SSP support?</code> is enabled</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has RPC support</code> is <strong>disabled</strong></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has C++ support?</code> is enabled</li>
<li>Under <code>System configuration</code>, the option <code>System hostname</code> is set to <code>gaming</code></li>
<li>Under <code>System configuration</code>, the option <code>System banner</code> is set to <code>Welcome to gaming!</code></li>
<li>Under <code>System configuration</code>, the option <code>Root password</code> is set to <code>root</code> (the root login will be bypassed later, so this value does not matter too much)</li>
<li>Under <code>System configuration</code>, the option <code>/dev management</code> is set to <code>Dynamic using devtmpfs + mdev</code> (to load drivers automatically when the target device boots)</li>
<li>Under <code>System configuration</code>, the option <code>Enable Native Language Support (NLS)</code> is enabled</li>
</ul>
<p>The following additional options are changed to install all required dependencies for <code>X.org</code> and <code>Allegro5</code>:</p>
<ul>
<li>Under <code>Target packages</code> -&gt; <code>Hardware handling</code> -&gt; <code>Firmware</code>, the option <code>rpi 4 (default)</code> is <strong>disabled</strong> (all the extra firmware is not needed)</li>
<li>Under <code>Target packages</code> -&gt; <code>Hardware handling</code> -&gt; <code>Firmware</code>, the option <code>rpi 4 (cut-down)</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Graphic libraries and applications (graphic/text)</code>, the option <code>ratpoison</code> is enabled (Dune Dynasty refuses to run without a WM and ratpoison places windows in the middle of the screen by default)</li>
<li>Under <code>Target packages</code> -&gt; <code>Graphic libraries and applications (graphic/text)</code>, the option <code>X.org X Window System</code> is enabled, along with the following options:
<ul>
<li><code>X11R7 Servers</code> -&gt; <code>xorg-server</code></li>
<li><code>X11R7 Servers</code> -&gt; <code>Xvfb server</code></li>
<li><code>X11R7 Applications</code> -&gt; <code>xinit</code></li>
<li><code>X11R7 Applications</code> -&gt; <code>xinput</code></li>
<li><code>X11R7 Applications</code> -&gt; <code>xrandr</code></li>
<li><code>X11R7 Drivers</code> -&gt; <code>xf86-input-keyboard</code></li>
<li><code>X11R7 Drivers</code> -&gt; <code>xf86-input-mouse</code></li>
<li><code>X11R7 Drivers</code> -&gt; <code>xf86-video-fbdev</code></li>
<li><code>X11R7 Drivers</code> -&gt; <code>xf86-video-fbturbo</code></li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Graphic libraries and applications (graphic/text)</code>, the option <code>mesa3d</code> is enabled, along with the following options:
<ul>
<li><code>Gallium v3d driver</code></li>
<li><code>Gallium vc4 driver</code></li>
<li><code>DRI nouveau driver</code> (Enable DRI support by enabling at least one driver, or Dune Dynasty will give a black screen with the following error log: <code>bo.1: permission denied</code>)</li>
<li><code>OSMesa (Gallium) library</code></li>
<li><code>OpenGL GLX</code></li>
<li><code>OpenGL EGL</code></li>
<li><code>OpenGL ES</code></li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Graphic libraries and applications (graphic/text)</code>, the option <code>sdl2</code> is enabled, along with the following extra options:
<ul>
<li><code>X11 video driver</code></li>
<li><code>KMS/DRM video driver</code></li>
<li><code>OpenGL (GLX)</code></li>
<li><code>OpenGL ES</code></li>
<li><code>sdl2_gfx</code></li>
<li><code>sdl2_ttf</code></li>
<li><code>sdl2_image</code></li>
<li><code>sdl2_mixer</code></li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Graphic libraries and applications (graphic/text)</code>, the option <code>xterm</code> is enabled (for debugging)</li>
<li>Under <code>Target packages</code> -&gt; <code>Audio and video applications</code>, the option <code>fluidsynth</code> is enabled, along with the following extra options:
<ul>
<li>alsa</li>
<li>jack2</li>
<li>sdl2</li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Graphics</code>, the option <code>libglew</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Graphics</code>, the option <code>libglfw</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Graphics</code>, the option <code>libglu</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Graphics</code>, the option <code>libgtk3</code> is enabled, along with the option <code>X11 GDK backend</code> (the rest is <strong>disabled</strong>)</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Filesystem</code>, the option <code>physfs</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Audio/Sound</code>, the option <code>opusfile</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Audio/Sound</code>, the option <code>libmad</code> is enabled</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Audio/Sound</code>, the option <code>alsa-lib</code> is enabled, as well as all the extra options it provides</li>
<li>Under <code>Target packages</code> -&gt; <code>Libraries</code> -&gt; <code>Multimedia</code>, the option <code>libtheora</code> is enabled</li>
</ul>
<p>The target OS should now have all required dependencies enabled.</p>
<h2 id="automatic-post-build-system-changes">Automatic post-build system changes</h2>
<p>There are a few changes made to the system after it&rsquo;s built. These changes are as follows:</p>
<ul>
<li>Make sure <code>mdev</code> loads device firmware</li>
<li>Bypass the login prompt</li>
<li>Make sure X.org starts correctly when <code>xinit</code> is executed inside the target OS</li>
<li>Make sure Dune Dynasty is started when the WM starts</li>
<li>Disable automatic network setup</li>
</ul>
<p>To make sure these changes are always present in the target OS, the following will be appended to <code>/path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/post-build.sh</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Make sure device firmware is being loaded during boot</span>
</span></span><span style="display:flex;"><span>cp package/busybox/S10mdev <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S10mdev
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S10mdev
</span></span><span style="display:flex;"><span>chmod +x <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S10mdev
</span></span><span style="display:flex;"><span>cp package/busybox/mdev.conf <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/mdev.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Skip login by changing /etc/inittab</span>
</span></span><span style="display:flex;"><span>sed -i s<span style="color:#e6db74">&#39;|console::respawn:/sbin/getty -L  console 0 vt100 # GENERIC_SERIAL|# login bypass|g&#39;</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/inittab
</span></span><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#39;s|tty1::respawn:/sbin/getty -L  tty1 0 vt100 # HDMI console|::respawn:-/bin/sh -c &#34;xinit&#34;|g&#39;</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/inittab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure X.org works</span>
</span></span><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#39;s| Driver|#Driver|g&#39;</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/X11/xorg.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure ratpoison WM</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;startup_message off&#34;</span> &gt; <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/.ratpoisonrc
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;exec /usr/local/bin/dunedynasty&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/.ratpoisonrc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Configure xinit</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;export LD_LIBRARY_PATH=&#34;/lib:/usr/lib:/usr/local/lib&#34;&#39;</span> &gt; <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/.xinitrc
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;ratpoison&#34;</span> &gt;&gt; <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/.xinitrc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete X.org and networking init files</span>
</span></span><span style="display:flex;"><span>rm <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S40xorg
</span></span><span style="display:flex;"><span>rm <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S40network
</span></span></code></pre></div><h2 id="automatically-build-and-install-allegro5-and-dune-dynasty-to-target-os">Automatically build and install Allegro5 and Dune Dynasty to target OS</h2>
<p>The <code>post-build.sh</code> file will also be used to automatically install Allegro5 and Dune Dynasty to the target OS.</p>
<p>There are two directories within Buildroot that are required when building and installing Allegro5 and Dune Dynasty:</p>
<ul>
<li><code>target</code>: buildroot-&lt;VERSION_GOES_HERE&gt;/output/target (<code>post-build.sh</code> refers to this as <code>${TARGET_DIR}</code>)</li>
<li><code>sysroot</code>: buildroot-&lt;VERSION_GOES_HERE&gt;/output/host/aarch64-buildroot-linux-gnu/sysroot (or, <code>${TARGET_DIR}/../host/aarch64-buildroot-linux-gnu/sysroot</code>)</li>
</ul>
<p>Compiling can only be done against the <code>sysroot</code> directory, while the target OS is stored in the <code>target</code> directory. For this reason, Allegro5 must be installed to both directories to compile and run Dune Dynasty correctly.</p>
<h3 id="creating-a-toolchain-for-both-allegro5-and-dune-dynasty">Creating a toolchain for both Allegro5 and Dune Dynasty</h3>
<p>A file called <code>Toolchain-raspberrypi4_64.cmake</code> is created inside the <code>/path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi</code>, with the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set target OS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_NAME Linux<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Force CMake to use the toolchain built by crosstool-NG</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (both 64 bit and 32 bit cross-compiling toolchains can</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># be used here)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_TOOLCHAIN_FILE /home/&lt;YOUR_USERNAME_GOES_HERE&gt;/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_C_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-gcc<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_CXX_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-g++<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_LINKER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-ld<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_C_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_CXX_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tell CMake to do all compiling against the target sysroot</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT /path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/host/aarch64-buildroot-linux-gnu/sysroot<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_COMPILE <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_LINK <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_PREFIX_PATH <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_INSTALL_PREFIX <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure CMake does not link against host OS libraries</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FINE_ROOT_PATH_MODE_PACKAGE ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###############################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure Allegro5 is found (using pkg-config).</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Only Dune Dynasty needs this. When building</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Allegro5, this part is ignored by CMake.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###############################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_DIR<span style="color:#f92672">}</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_LIBDIR<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/lib/pkgconfig:<span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/share/pkgconfig:<span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/local/lib/pkgconfig/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_PATH<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>PKG_CONFIG_LIBDIR<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_SYSROOT_DIR<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>This toolchain file is used by Allegro5 and Dune Dynasty to cross-compile and link to the target Buildroot OS.</p>
<h3 id="automate-the-installation-of-allegro5-and-dune-dynasty">Automate the installation of Allegro5 and Dune Dynasty</h3>
<p>To make sure Allegro5 and Dune Dynasty are added to the target OS after Buildroot is done creating it, the following is appended to <code>/path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/post-build.sh</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Add Allegro5 and Dune Dynasty to the target rootfs</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a temporary download directory</span>
</span></span><span style="display:flex;"><span>rm -rf tmp
</span></span><span style="display:flex;"><span>mkdir tmp
</span></span><span style="display:flex;"><span>cd tmp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install Allegro5 to target OS and development sysroot</span>
</span></span><span style="display:flex;"><span>wget https://github.com/liballeg/allegro5/releases/download/5.2.7.0/allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>tar -xvf allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>rm -rf allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>cp ../board/raspberrypi/Toolchain-raspberrypi4_64.cmake allegro-5.2.7.0/cmake/
</span></span><span style="display:flex;"><span>cd allegro-5.2.7.0/
</span></span><span style="display:flex;"><span>mkdir build
</span></span><span style="display:flex;"><span>cd build
</span></span><span style="display:flex;"><span>rm -rf CMakeFiles CMakeCache.txt addons cmake_install.cmake demos docs examples include lib Makefile tests
</span></span><span style="display:flex;"><span>cmake -DCMAKE_TOOLCHAIN_FILE<span style="color:#f92672">=</span>cmake/Toolchain-raspberrypi4_64.cmake -DSHARED<span style="color:#f92672">=</span>on -DCMAKE_LINKER_FLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-static-libgcc -static-libstdc++&#34;</span> ..
</span></span><span style="display:flex;"><span>make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/../host/aarch64-buildroot-linux-gnu/sysroot make install <span style="color:#75715e"># install to target sysroot to compile dune dynasty against</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span> make install <span style="color:#75715e"># install to target system</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cd ../../
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install Dune Dynasty to target OS</span>
</span></span><span style="display:flex;"><span>rm -rf dunedynasty-1.5.7/
</span></span><span style="display:flex;"><span>wget https://versaweb.dl.sourceforge.net/project/dunedynasty/dunedynasty-1.5/dunedynasty-1.5.7.tar.gz
</span></span><span style="display:flex;"><span>tar -xvf dunedynasty-1.5.7.tar.gz
</span></span><span style="display:flex;"><span>rm -rf dunedynasty-1.5.7.tar.gz
</span></span><span style="display:flex;"><span>cp ../board/raspberrypi/Toolchain-raspberrypi4_64.cmake dunedynasty-1.5.7/cmake/
</span></span><span style="display:flex;"><span>cd dunedynasty-1.5.7/
</span></span><span style="display:flex;"><span>mkdir build
</span></span><span style="display:flex;"><span>cd build
</span></span><span style="display:flex;"><span>cmake -DCMAKE_TOOLCHAIN_FILE<span style="color:#f92672">=</span>cmake/Toolchain-raspberrypi4_64.cmake ..
</span></span><span style="display:flex;"><span>make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span> make install <span style="color:#75715e"># install to target system</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cd ../../../
</span></span></code></pre></div><h2 id="creating-a-new-buildroot-os-1">Creating a new Buildroot OS</h2>
<p>To then create a new OS, the make command is executed within Buildroot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make clean
</span></span><span style="display:flex;"><span>make
</span></span></code></pre></div><p>After Buildroot is done, a file called <code>rootfs.tar.gz</code> is created inside the <code>/path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/images</code> directory. This is the entire OS, minus the kernel.</p>
<h1 id="compiling-the-linux-kernel">Compiling the linux kernel</h1>
<p>While Buildroot is doing it&rsquo;s thing, a linux kernel can be compiled. There exists a <a href="https://github.com/raspberrypi/linux">github repository</a> containing a complete kernel source for the Raspberry Pi. This source will be used to create a kernel.</p>
<h2 id="downloading-the-source">Downloading the source</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/raspberrypi/linux
</span></span><span style="display:flex;"><span>git checkout rpi-5.10.y <span style="color:#75715e"># version 5.10.y matches the one from the toolchain</span>
</span></span><span style="display:flex;"><span>git checkout d261fd9f97da8b6b3ed1fa613cc3fd6abb41f0be <span style="color:#75715e"># known working commit for the paranoid (optional)</span>
</span></span><span style="display:flex;"><span>cd linux
</span></span></code></pre></div><h2 id="configuring-the-source">Configuring the source</h2>
<p>To see all available default configurations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ls arch/arm64/configs/
</span></span></code></pre></div><p>To pick the one for the Raspberry Pi 4:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu- make bcm2711_defconfig
</span></span></code></pre></div><h2 id="compiling">Compiling</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu- make clean
</span></span><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu- make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu- make modules -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>After the compiling process is done, there should be a file called <code>Image</code> inside the <code>/path/to/linux/arch/arm64/boot</code> directory.</p>
<h1 id="creating-a-system-image">Creating a system image</h1>
<p>Buildroot is done, Linux is compiled. Everything can now be put inside of a system image. This process will be automated using a file called <code>build_image.sh</code>.</p>
<h2 id="creating-raspberry-pi-4-boot-configuration-configtxt">Creating Raspberry Pi 4 boot configuration (config.txt)</h2>
<p>Before <code>build_image.sh</code> can do it&rsquo;s thing, a file called <code>config.txt</code> will be created in the root directory of the project. The file will have the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#75715e"># Enable 64 bit mode</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">arm_64bit</span><span style="color:#f92672">=</span><span style="color:#e6db74">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make the raspberry Pi 4 start the linux binary called &#34;Image&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">kernel</span><span style="color:#f92672">=</span><span style="color:#e6db74">Image</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable bluetooth</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dtoverlay</span><span style="color:#f92672">=</span><span style="color:#e6db74">disable-bt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run cut-down files</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">start_file</span><span style="color:#f92672">=</span><span style="color:#e6db74">start4cd.elf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fixup_file</span><span style="color:#f92672">=</span><span style="color:#e6db74">fixup4cd.dat</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Go fast</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">arm_boost</span><span style="color:#f92672">=</span><span style="color:#e6db74">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">initial_turbo</span><span style="color:#f92672">=</span><span style="color:#e6db74">20</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">boot_delay</span><span style="color:#f92672">=</span><span style="color:#e6db74">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">boot_delay_ms</span><span style="color:#f92672">=</span><span style="color:#e6db74">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">force_eeprom_read</span><span style="color:#f92672">=</span><span style="color:#e6db74">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">start_cd</span><span style="color:#f92672">=</span><span style="color:#e6db74">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">start_x</span><span style="color:#f92672">=</span><span style="color:#e6db74">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">enable_uart</span><span style="color:#f92672">=</span><span style="color:#e6db74">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disable rainbow splash screen</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">disable_splash</span><span style="color:#f92672">=</span><span style="color:#e6db74">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable DRM VC4 V3D driver overlay</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dtoverlay</span><span style="color:#f92672">=</span><span style="color:#e6db74">vc4-fkms-v3d-pi4</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">max_framebuffers</span><span style="color:#f92672">=</span><span style="color:#e6db74">2</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">gpu_mem</span><span style="color:#f92672">=</span><span style="color:#e6db74">128</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable audio</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dtparam</span><span style="color:#f92672">=</span><span style="color:#e6db74">audio=on</span>
</span></span></code></pre></div><h2 id="creating-raspberry-pi-4-boot-configuration-cmdlinetxt">Creating Raspberry Pi 4 boot configuration (cmdline.txt)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rng_core.default_quality<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span> dwc_otg.lpm_enable<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> console<span style="color:#f92672">=</span>tty1 root<span style="color:#f92672">=</span>/dev/mmcblk0p2 rootfstype<span style="color:#f92672">=</span>ext4 rootwait quiet
</span></span></code></pre></div><h2 id="creating-the-build-script">Creating the build script</h2>
<p>The file <code>build_image.sh</code> is created inside the root directory of the project, and has the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#########################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a system image called &#34;system.img&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rm -rf system.img
</span></span><span style="display:flex;"><span>sudo dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/zero of<span style="color:#f92672">=</span>system.img bs<span style="color:#f92672">=</span>1MiB count<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span> status<span style="color:#f92672">=</span>progress
</span></span><span style="display:flex;"><span>sudo sync
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;mklabel msdos&#34;</span> | sudo parted system.img
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;mkpart primary fat16 2048s 30MiB&#34;</span> | sudo parted system.img
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;mkpart primary ext4 30MiB 100%&#34;</span> | sudo parted system.img
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;set 1 boot on&#34;</span> | sudo parted system.img
</span></span><span style="display:flex;"><span><span style="color:#75715e"># echo &#34;print&#34; | sudo parted system.img</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sleep 10</span>
</span></span><span style="display:flex;"><span>sudo chmod <span style="color:#ae81ff">777</span> system.img
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###########################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Mount the system image, as if it&#39;s a device</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###########################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SYSTEM_IMAGE<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>sudo losetup -Pf system.img --show<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">##########################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Partition the system image</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">##########################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo mkfs.vfat -n BOOT <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p1&#34;</span><span style="color:#e6db74">`</span>   <span style="color:#75715e"># Create a fat16 partition for boot files</span>
</span></span><span style="display:flex;"><span>sudo mkfs.ext4 -L ROOTFS <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p2&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e"># Create an ext4 partition for rootfs files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">########################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Mount the new partitions</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">########################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo rm -rf ./target_mnt
</span></span><span style="display:flex;"><span>mkdir ./target_mnt
</span></span><span style="display:flex;"><span>sudo mount <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p2&#34;</span><span style="color:#e6db74">`</span> ./target_mnt
</span></span><span style="display:flex;"><span>sudo mkdir ./target_mnt/boot
</span></span><span style="display:flex;"><span>sudo mount <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p1&#34;</span><span style="color:#e6db74">`</span> ./target_mnt/boot
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###############</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy boot files</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">###############</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Raspberry Pi 4 boot configuration</span>
</span></span><span style="display:flex;"><span>sudo cp ./config.txt ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./cmdline.txt ./target_mnt/boot/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># firmware</span>
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-2021.11/output/images/rpi-firmware/bcm2711-rpi-4-b.dtb ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-2021.11/output/images/rpi-firmware/start4cd.elf ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-2021.11/output/images/rpi-firmware/fixup4cd.dat ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-2021.11/output/images/rpi-firmware/overlays ./target_mnt/boot -r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># kernel</span>
</span></span><span style="display:flex;"><span>sudo cp ./linux/arch/arm64/boot/Image ./target_mnt/boot/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy rootfs files</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># buildroot&#39;s rootfs</span>
</span></span><span style="display:flex;"><span>cd target_mnt/
</span></span><span style="display:flex;"><span>sudo tar -xvf ../buildroot-2021.11/output/images/rootfs.tar.gz .
</span></span><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># kernel</span>
</span></span><span style="display:flex;"><span>cd linux
</span></span><span style="display:flex;"><span>sudo INSTALL_MOD_PATH<span style="color:#f92672">=</span>../target_mnt/ ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>/home/tom/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu- make modules_install
</span></span><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sleep <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># game files</span>
</span></span><span style="display:flex;"><span>sudo cp ./data ./target_mnt -r
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">########################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Unmount the system image</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">########################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo sync
</span></span><span style="display:flex;"><span>sudo umount ./target_mnt/boot -l
</span></span><span style="display:flex;"><span>sudo umount ./target_mnt -l
</span></span><span style="display:flex;"><span>sudo losetup -D
</span></span><span style="display:flex;"><span>sudo rm -rf ./target_mnt
</span></span></code></pre></div><p>The system should now be ready to run Dune Dynasty. Flash the system.img file to any Raspberry Pi 4&rsquo;s SD card and see the OS in action!</p>
<h1 id="debugging">Debugging</h1>
<p>If the system does not boot into ratpoison automatically, the game can be started manually, using the following commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># start X.org (will start one xterm window for now)</span>
</span></span><span style="display:flex;"><span>xinit
</span></span><span style="display:flex;"><span><span style="color:#75715e"># start twm window manager</span>
</span></span><span style="display:flex;"><span>exec twm &amp;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># load some kernel modules related to hardware acceleration (still in testing phase)</span>
</span></span><span style="display:flex;"><span>modprobe v3d
</span></span><span style="display:flex;"><span>modprobe vc4
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make sure the Dune Dynasty binary can find the Allegro5 library files</span>
</span></span><span style="display:flex;"><span>export LD_LIBRARY_PATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/lib:/usr/lib:/usr/local/lib&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># start Dune Dynasty</span>
</span></span><span style="display:flex;"><span>/usr/local/bin/dunedynasty
</span></span></code></pre></div><h1 id="extras">Extra&rsquo;s</h1>
<h2 id="building-allegro5-manually-optional">Building Allegro5 manually (optional)</h2>
<p>To compile Dune Dynasty, the <a href="https://github.com/liballeg/allegro5">Allegro5 game programming library</a> is needed.</p>
<p>Buildroot must be done building before Allegro5 is built; Allegro5 cannot compile against an incomplete OS.</p>
<h3 id="downloading-the-source-files">Downloading the source files</h3>
<p>To download and extract the Allegro5 library source file, the following commands are executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/liballeg/allegro5/releases/download/5.2.7.0/allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>tar -xvf allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>rm -rf allegro-5.2.7.0.tar.gz
</span></span><span style="display:flex;"><span>cd allegro-5.2.7.0/
</span></span></code></pre></div><h3 id="configuring-cmake">Configuring CMake</h3>
<p>In the folder <code>allegro-5.2.7.0/cmake</code> are a bunch of files related to CMake. Within the list of files there is a file called <a href="https://github.com/liballeg/allegro5/blob/master/cmake/Toolchain-raspberrypi.cmake">Toolchain-raspberrypi.cmake</a>. This file contains configuration that tells CMake how to build the library for the first Raspberry Pi. The first Raspberry Pi is 32 bit and the toolchain does <em>not</em> have multilib support enabled. Therefor, a new toolchain must be created.</p>
<p>A custom file called <code>Toolchain-raspberrypi4_64.cmake</code> will be created and placed inside the <code>allegro-5.2.7.0/cmake</code> directory. The file will contain the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set target OS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_NAME Linux<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Force CMake to use the toolchain built by crosstool-NG</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (both 64 bit and 32 bit cross-compiling toolchains can</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># be used here)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_TOOLCHAIN_FILE /home/&lt;YOUR_USERNAME_GOES_HERE&gt;/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_C_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-gcc<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_CXX_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-g++<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_LINKER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-ld<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_C_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_CXX_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tell CMake to do all compiling against the target sysroot</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT /path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/host/aarch64-rpi4-linux-gnu/sysroot<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_COMPILE <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_LINK <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_PREFIX_PATH <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_INSTALL_PREFIX <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure CMake does not link against host OS libraries</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FINE_ROOT_PATH_MODE_PACKAGE ONLY<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>When the following commands are then executed, the Allegro library will be built:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># create a build directory and go into it, to separate source code from binaries</span>
</span></span><span style="display:flex;"><span>mkdir build/
</span></span><span style="display:flex;"><span>cd build/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># delete old build files (in case the previous build failed)</span>
</span></span><span style="display:flex;"><span>rm -rf CMakeFiles CMakeCache.txt addons cmake_install.cmake demos docs examples include lib Makefile tests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># configure CMake</span>
</span></span><span style="display:flex;"><span>cmake -DCMAKE_TOOLCHAIN_FILE<span style="color:#f92672">=</span>cmake/Toolchain-raspberrypi4_64.cmake -DSHARED<span style="color:#f92672">=</span>on -DCMAKE_LINKER_FLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-static-libgcc -static-libstdc++&#34;</span> ..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># build Allegro5</span>
</span></span><span style="display:flex;"><span>make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><h3 id="manually-installing-allegro5-to-the-target-buildroot-os">Manually installing Allegro5 to the target Buildroot OS</h3>
<p>After Allegro5 is done compiling, it can be installed to the target OS using the environment variable <code>DESTDIR</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># dune dynasty will compile against this sysroot, it cannot compile against target</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span>path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/host/&lt;COMPILING_TOOLCHAIN_GOES_HERE&gt;/sysroot make install
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install to target OS as well</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span>path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/target/ make install
</span></span></code></pre></div><h2 id="manually-compiling-dune-dynasty-against-the-target-buildroot-os">Manually compiling Dune Dynasty against the target Buildroot OS</h2>
<p>It it assumed that Allegro5 was installed to the target Buildroot OS. If it&rsquo;s not, this has to be done before continuing.</p>
<p>First, download and extract the game:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://versaweb.dl.sourceforge.net/project/dunedynasty/dunedynasty-1.5/dunedynasty-1.5.7.tar.gz
</span></span><span style="display:flex;"><span>tar -xvf dunedynasty-1.5.7.tar.gz
</span></span><span style="display:flex;"><span>rm -rf dunedynasty-1.5.7.tar.gz
</span></span></code></pre></div><p>Then, create a toolchain file in the <code>dunedynasty-1.5.7/cmake</code> directory, called <code>Toolchain-raspberrypi4_64.cmake</code>. The toolchain is almost the same as the one from Allegro5, but with some extra configuration at the bottom:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set target OS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#############</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_NAME Linux<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Force CMake to use the toolchain built by crosstool-NG</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (both 64 bit and 32 bit cross-compiling toolchains can</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># be used here)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_TOOLCHAIN_FILE /home/&lt;YOUR_USERNAME_GOES_HERE&gt;/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_C_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-gcc<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_CXX_COMPILER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-g++<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_LINKER <span style="color:#e6db74">${</span>CMAKE_TOOLCHAIN_FILE<span style="color:#e6db74">}</span>-ld<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_C_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>MAKE_CXX_LINK_EXECUTABLE <span style="color:#e6db74">${</span>CMAKE_LINKER<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tell CMake to do all compiling against the target sysroot</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#########################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT /path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/host/&lt;COMPILING_TOOLCHAIN_GOES_HERE&gt;/sysroot<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_COMPILE <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSROOT_LINK <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_SYSTEM_PREFIX_PATH <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_INSTALL_PREFIX <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure CMake does not link against host OS libraries</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#######################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>CMAKE_FINE_ROOT_PATH_MODE_PACKAGE ONLY<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">##############################################</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure Allegro5 is found (using pkg-config)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">##############################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_DIR<span style="color:#f92672">}</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_LIBDIR<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/lib/pkgconfig:<span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/share/pkgconfig:<span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span>/usr/local/lib/pkgconfig/<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_PATH<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>PKG_CONFIG_LIBDIR<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>set<span style="color:#f92672">(</span>ENV<span style="color:#f92672">{</span>PKG_CONFIG_SYSROOT_DIR<span style="color:#f92672">}</span> <span style="color:#e6db74">${</span>CMAKE_SYSROOT<span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>To then compile the game, create a directory called <code>build</code>, go into it and compile everything:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># go inside a build directory to separate binaries from source code</span>
</span></span><span style="display:flex;"><span>mkdir build/
</span></span><span style="display:flex;"><span>cd build/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># configure CMake</span>
</span></span><span style="display:flex;"><span>cmake -DCMAKE_TOOLCHAIN_FILE<span style="color:#f92672">=</span>../cmake/Toolchain-raspberrypi4_64.cmake ..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># build the game</span>
</span></span><span style="display:flex;"><span>make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><h3 id="installing-the-game-to-the-target-sysroot">Installing the game to the target sysroot</h3>
<p>Installing the binaries to the target sysroot is exactly the same process as installing Allegro5:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo DESTDIR<span style="color:#f92672">=</span>path/to/buildroot-&lt;VERSION_GOES_HERE&gt;/output/target/ make install <span style="color:#75715e"># install to target OS</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Creating an access point using buildroot</title>
            <link>https://tomniesse.github.io/posts/buildroot-ap/</link>
            <pubDate>Mon, 20 Dec 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/buildroot-ap/</guid>
            <description>Introduction This page describes how a minimal router OS can be created using buildroot.
All configurations and build commands are documented on this page.
The resulting OS will boot, connect to the first LAN-network it can find and then start an access point.
Previous work This post is based on another post in which a basic embedded OS is created.
Editing the minimal Buildroot OS Configuring the access point part of the target system With the options above all set, the Raspberry Pi 4 should boot the target system without any issues.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This page describes how a minimal router OS can be created using <a href="https://buildroot.org">buildroot</a>.<br>
All configurations and build commands are documented on this page.</p>
<p>The resulting OS will boot, connect to the first LAN-network it can find and then start an access point.</p>
<h1 id="previous-work">Previous work</h1>
<p>This post is based on <a href="/posts/buildroot/">another post</a> in which a basic embedded OS is created.</p>
<h1 id="editing-the-minimal-buildroot-os">Editing the minimal Buildroot OS</h1>
<h2 id="configuring-the-access-point-part-of-the-target-system">Configuring the access point part of the target system</h2>
<p>With the options above all set, the Raspberry Pi 4 should boot the target system without any issues. But, because the goal is to create a router out of the Raspberry Pi 4, some extra configuration is needed.</p>
<p>In the <code>menuconfig</code> of buildroot, make the following extra changes:</p>
<ul>
<li>Under <code>Build options</code>, the option <code>RELRO Protection</code> is set to partial</li>
<li>Under <code>Target packages</code> -&gt; <code>BusyBox</code>, the option <code>Show packages that are also provided by busybox</code></li>
<li>Under <code>Target packages</code> -&gt; <code>Networking applications</code>, the option <code>iptables</code> is enabled, along with the following options:
<ul>
<li><code>bpfc and nfsynproxy</code></li>
<li><code>nftables compat</code></li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Networking applications</code>, the option <code>dhcp (ISC)</code> is enabled, along with the following options:
<ul>
<li><code>dhcp server</code>, along with:
<ul>
<li><code>Enable delayed ACK feature</code></li>
</ul>
</li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Networking applications</code> -&gt; <code>wpa_supplicant</code>, the following options are enabled:
<ul>
<li><code>Enable nl80211 support</code></li>
<li><code>Enable AP mode</code></li>
<li><code>Enable EAP</code></li>
<li><code>Enable WPA3 support</code></li>
<li><code>Install wpa_passphrase binary</code></li>
<li><code>Enable support for the DBus control interface</code> (optional, if control via DBus is desired)</li>
<li><code>Introspection support</code> (optional, also has to do with control via DBus)</li>
</ul>
</li>
<li>Under <code>Target packages</code> -&gt; <code>Hardware handling</code> -&gt; <code>Firmware</code>, the option <code>rpi-wifi-firmware</code> is enabled.</li>
</ul>
<p>Using the command <code>make linux-menuconfig</code>, the following additional changes are made to the kernel configuration (still within Buildroot):</p>
<ul>
<li>Under <code>CPU Power Management</code> -&gt; <code>CPU Frequency scaling</code>, the option <code>Default CPUFreq governor</code> is set to <code>ondemand</code></li>
</ul>
<h2 id="adding-external-network-configuration-files-to-the-target-system">Adding external (network) configuration files to the target system</h2>
<p>Some configuration files are needed by the target system in order to make the access point a reality. Normally, configuration files would be created on the target system. In this case, this is not desireable. Fortunately, Buildroot had a file called <code>post-build.sh</code>, located in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. This file will be used to automatically copy network configurations to the target system after it&rsquo;s been built.</p>
<h3 id="wpa_supplicantconf">wpa_supplicant.conf</h3>
<p>The tool <code>wpa_supplicant</code> is often used to connect to networks, but it can also be configured to act as an access point. In order to do this, it needs a configuration file called <code>wpa_supplicant.conf</code>.</p>
<p>To create a wireless access point on the target system, create a file called <code>wpa_supplicant.conf</code> and place it in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file has the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>network<span style="color:#f92672">={</span>
</span></span><span style="display:flex;"><span>    ssid<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;buildrootAP&#34;</span>  <span style="color:#75715e"># network name</span>
</span></span><span style="display:flex;"><span>    psk<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;welcome01&#34;</span>     <span style="color:#75715e"># network password</span>
</span></span><span style="display:flex;"><span>    mode<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>              <span style="color:#75715e"># act as an access point</span>
</span></span><span style="display:flex;"><span>    proto<span style="color:#f92672">=</span>RSN
</span></span><span style="display:flex;"><span>    key_mgmt<span style="color:#f92672">=</span>WPA-PSK
</span></span><span style="display:flex;"><span>    pairwise<span style="color:#f92672">=</span>CCMP
</span></span><span style="display:flex;"><span>    group<span style="color:#f92672">=</span>CCMP          <span style="color:#75715e"># allow only AES, not TKIP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#frequency=5200     # uncomment to run access point on 5GHz</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This configuration will create a WPA2 network with the name <code>buildrootAP</code> and password <code>welcome01</code>.</p>
<p>Frequency options are as follows:</p>
<ul>
<li>For a 2.4GHz access point: <code>2412</code>, <code>2417</code>, <code>2422</code>, <code>2427</code>, <code>2432</code>, <code>2437</code>, <code>2442</code>, <code>2447</code>, <code>2452</code>, <code>2457</code>, <code>2462</code>, <code>2467</code> or <code>2472</code></li>
<li>For a 5GHz access point: <code>5170</code>, <code>5180</code>, <code>5190</code>, <code>5200</code>, <code>5210</code>, <code>5220</code>, <code>5230</code>, <code>5240</code>, <code>5260</code>, <code>5280</code>, <code>5300</code>, <code>5320</code>, <code>5500</code>, <code>5520</code>, <code>5540</code>, <code>5560</code>, <code>5580</code>, <code>5600</code>, <code>5620</code>, <code>5640</code>, <code>5660</code>, <code>5680</code> or <code>5700</code></li>
</ul>
<p>On 5GHz, if the frequency is set too high, the signal will probably not travel through walls very well. A higher frequency does result in a faster internet speed. Not all frequencies may be supported by the wireless interface of the Raspberry Pi 4. If the network SSID does not appear after the Raspberry Pi 4 has started, change the frequency to another value.</p>
<h3 id="interfaces">interfaces</h3>
<p>Another common file found in Linux-based operating systems is a file called <code>interfaces</code>. This file often contains configurations regarding IP addressing of certain interfaces.</p>
<p>To create interface configuration for the target system, create a file called <code>interfaces</code> and place it in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file is to contain the following configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>auto lo
</span></span><span style="display:flex;"><span>iface lo inet loopback
</span></span><span style="display:flex;"><span>auto eth0
</span></span><span style="display:flex;"><span>iface eth0 inet dhcp
</span></span><span style="display:flex;"><span>    udhcpc_opts -t <span style="color:#ae81ff">99</span> <span style="color:#75715e"># try 99 times before giving up</span>
</span></span><span style="display:flex;"><span>    pre-up /etc/network/nfs_check
</span></span><span style="display:flex;"><span>    wait-delay <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>auto wlan0
</span></span><span style="display:flex;"><span>iface wlan0 inet static
</span></span><span style="display:flex;"><span>    address 192.168.200.1
</span></span><span style="display:flex;"><span>    netmask 255.255.255.0
</span></span><span style="display:flex;"><span>    network 192.168.200.0
</span></span><span style="display:flex;"><span>    gateway 192.168.200.1
</span></span><span style="display:flex;"><span>    pre-up wpa_supplicant -B -Dnl80211 -iwlan0 -c/etc/wpa_supplicant.conf
</span></span><span style="display:flex;"><span>    post-down killall -q wpa_supplicant
</span></span><span style="display:flex;"><span>    wait-delay <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>iface default inet dhcp
</span></span></code></pre></div><h3 id="dhcpdconf">dhcpd.conf</h3>
<p>Almost every modern router has a DHCP server built in. So, the target system should also have one.</p>
<p>To configure the DHCP server on the target system, create a file called <code>dhcpd.conf</code> and place it in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file is to have the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ddns-update-style none;
</span></span><span style="display:flex;"><span>default-lease-time 600;
</span></span><span style="display:flex;"><span>max-lease-time 7200;
</span></span><span style="display:flex;"><span>authoritative;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>subnet 192.168.200.0 netmask 255.255.255.0 <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  range 192.168.200.10 192.168.200.50;
</span></span><span style="display:flex;"><span>  option broadcast-address 192.168.200.255;
</span></span><span style="display:flex;"><span>  option routers 192.168.200.1;
</span></span><span style="display:flex;"><span>  default-lease-time 600;
</span></span><span style="display:flex;"><span>  max-lease-time 7200;
</span></span><span style="display:flex;"><span>  option domain-name <span style="color:#e6db74">&#34;local&#34;</span>;
</span></span><span style="display:flex;"><span>  option domain-name-servers 9.9.9.9, 1.1.1.1;
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="sysctlconf">sysctl.conf</h3>
<p>To allow packages to flow from one linux network interface to another, a file called <code>sysctl.conf</code> has to be created and placed in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file is to have the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>net.ipv4.ip_forward <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><h3 id="s02procps">S02procps</h3>
<p>To activate the above configuration file (<code>sysctl.conf</code>) when the target OS boots, a startup/service file called <code>S02procps</code> is created and placed in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file will have the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;start&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    sysctl -p
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><h3 id="s99firewall">S99firewall</h3>
<p>To configure firewall settings when the target OS boots, a service will be created. The file will be called <code>s99firewall</code> and placed in <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/</code>. The file will have the following contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;start&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</span></span><span style="display:flex;"><span>    iptables -P FORWARD DROP
</span></span><span style="display:flex;"><span>    iptables -A FORWARD -i eth0 -o wlan0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
</span></span><span style="display:flex;"><span>    iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT
</span></span><span style="display:flex;"><span>    iptables -P INPUT DROP
</span></span><span style="display:flex;"><span>    iptables -A INPUT -i eth0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
</span></span><span style="display:flex;"><span>    iptables -A INPUT -i wlan0 -j ACCEPT
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><h2 id="copying-all-files-to-the-target-system">Copying all files to the target system</h2>
<p>To automatically copy all configuration files and services into the target system after it has been built, the following lines will be appended to <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/post-build.sh</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># copy configuration files</span>
</span></span><span style="display:flex;"><span>cp board/raspberrypi/interfaces <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/network/interfaces
</span></span><span style="display:flex;"><span>cp board/raspberrypi/wpa_supplicant.conf <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/wpa_supplicant.conf
</span></span><span style="display:flex;"><span>cp board/raspberrypi/dhcpd.conf <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/dhcp/dhcpd.conf
</span></span><span style="display:flex;"><span>cp board/raspberrypi/sysctl.conf <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/sysctl.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># copy init scripts</span>
</span></span><span style="display:flex;"><span>cp board/raspberrypi/S02procps <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S02procps
</span></span><span style="display:flex;"><span>cp board/raspberrypi/S99firewall <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S99firewall
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># set permissions on the new init scripts</span>
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S02procps
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S99firewall
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make the init scripts executable</span>
</span></span><span style="display:flex;"><span>chmod +x <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S02procps
</span></span><span style="display:flex;"><span>chmod +x <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S99firewall
</span></span></code></pre></div><h2 id="rebuilding-the-os">Rebuilding the OS</h2>
<p>After all configurations are done, rebuild the system as explained in the previous post.</p>
<h1 id="testing">Testing</h1>
<p>After the <code>system.img</code> file is flashed to an SD card, the SD card can be plugged into any Raspberry Pi 4.<br>
If a monitor is connected to the <code>HDMI0</code> port of the Raspberry Pi 4, the following logs can be seen:</p>
<p><a href="/posts/buildroot-ap/images/started.jpg"><img alt="Startup logs" src="/posts/buildroot-ap/images/started.jpg"></a></p>
<p>The Raspberry Pi successfully connected to a lan network and then started it&rsquo;s wireless access point. The network SSID should now be visible to client devices and connections can now be made.</p>
<p>The OS will fail to start the access point if it cannot connect to another LAN network via DHCP. If <code>udhcpc</code> fails after trying 99 times, the OS will not start a wireless network.</p>
<h1 id="sources">Sources</h1>
<ul>
<li><a href="https://bootlin.com/doc/training/buildroot/buildroot-slides.pdf">https://bootlin.com/doc/training/buildroot/buildroot-slides.pdf</a></li>
<li><a href="https://blog.crysys.hu/2018/06/enabling-wifi-and-converting-the-raspberry-pi-into-a-wifi-ap/">https://blog.crysys.hu/2018/06/enabling-wifi-and-converting-the-raspberry-pi-into-a-wifi-ap/</a></li>
<li><a href="https://unix.stackexchange.com/questions/439559/udhcpc-no-lease-failing-when-booting-on-embedded-linux-created-by-buildroot">https://unix.stackexchange.com/questions/439559/udhcpc-no-lease-failing-when-booting-on-embedded-linux-created-by-buildroot</a></li>
<li><a href="https://raspberrypi.stackexchange.com/questions/107858/raspberry-pi-4-b-5ghz-wifi-access-point-problem">https://raspberrypi.stackexchange.com/questions/107858/raspberry-pi-4-b-5ghz-wifi-access-point-problem</a></li>
<li><a href="http://lists.busybox.net/pipermail/buildroot/2019-June/252256.html">http://lists.busybox.net/pipermail/buildroot/2019-June/252256.html</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Introduction to docker(-compose)</title>
            <link>https://tomniesse.github.io/posts/docker/</link>
            <pubDate>Sun, 05 Dec 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/docker/</guid>
            <description>What is Docker? Docker is software that allows other programs and OS&amp;rsquo;es to run inside a container. There are other virtualization programs that can do the same (VMWare, VirtualBox, QEMU, etc.), but Docker allows building a container using a script. This script is called a Dockerfile. In addition to this, the package docker-compose allows running multiple dockerfiles at once. This way, multiple containers can run simultaneously and work together to get a certain task done.</description>
            <content type="html"><![CDATA[<h1 id="what-is-docker">What is Docker?</h1>
<p>Docker is software that allows other programs and OS&rsquo;es to run inside a container. There are other virtualization programs that can do the same (VMWare, VirtualBox, QEMU, etc.), but Docker allows building a container using a script. This script is called a <code>Dockerfile</code>. In addition to this, the package <code>docker-compose</code> allows running multiple dockerfiles at once. This way, multiple containers can run simultaneously and work together to get a certain task done. So, Docker takes much of the pain away when configuring a system, since all system configurations are stored inside the Dockerfiles. This post is going to explain the basics of making a Dockerfile and how docker-compose can manage multiple containers.</p>
<h1 id="creating-a-dockerfile">Creating a Dockerfile</h1>
<p>A Dockerfile is a configuration script for any given container. The Dockerfile contains all the commands needed to configure an entire container (virtual machine). This chapter explains how a Dockerfile is made. All commands one would normally insert into a system are now stored in a Dockerfile.</p>
<h2 id="the-syntax">The syntax</h2>
<p>Dockerfiles have the following syntax (where everything including and between the <code>&lt;</code> and <code>&gt;</code> is to be replaced):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># this is a comment</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> &lt;existing container&gt;      # use someone else&#39;s already existing container to get started more quickly</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> &lt;command&gt;                  <span style="color:#75715e"># run a command inside the container (configure phase)</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># when the container starts, run the following command, where the two dashes (--) allow arguments from the host</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;&lt;/path/to/binary&gt;&#34;</span>, <span style="color:#960050;background-color:#1e0010">&lt;optional</span> <span style="color:#960050;background-color:#1e0010">argument</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&gt;</span>, <span style="color:#960050;background-color:#1e0010">--</span>, <span style="color:#960050;background-color:#1e0010">&lt;optional</span> <span style="color:#960050;background-color:#1e0010">argument</span> <span style="color:#ae81ff">3</span><span style="color:#960050;background-color:#1e0010">&gt;</span>, <span style="color:#960050;background-color:#1e0010">...</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># when the container starts, run the following command (in case no arguments were given, this is the default)</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;&lt;/path/to/binary&gt;&#34;</span>, <span style="color:#960050;background-color:#1e0010">&lt;optional</span> <span style="color:#960050;background-color:#1e0010">argument</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">&gt;</span>, <span style="color:#960050;background-color:#1e0010">&lt;optional</span> <span style="color:#960050;background-color:#1e0010">argument</span> <span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">&gt;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><h2 id="a-real-world-example">A real world example</h2>
<p>In real life, a Dockerfile contains many more calls to <code>RUN</code> before the container is configured. In the example below, a gitea server is created within a Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># use alpine linux</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># install gitea</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk update<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk add gitea<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># run gitea</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> /usr/bin/gitea<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># expose port 3000 to the host</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 3000</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Before this Dockerfile is used to create a container, another file called <code>docker-compose.yml</code> is created to manage all containers.</p>
<h1 id="creating-a-docker-compose-configuration">Creating a docker-compose configuration</h1>
<h2 id="the-syntax-1">The syntax</h2>
<p>A configuration for docker-compose is to be called <code>docker-compose.yml</code> and it has the following syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># a container which is built using a dockerfile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">a_service</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">&lt;directory where the Dockerfile is located&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">&lt;container name goes here&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&lt;path/to/host/dir&gt;:&lt;path/to/guest/dir&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&lt;host port&gt;:&lt;guest port&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># create another service; uses a pre-built image from Docker Hub</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">another_service</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">&lt;image name from Docker Hub goes here&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">&lt;container name goes here&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&lt;path/to/host/dir&gt;:&lt;path/to/guest/dir&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&lt;host port&gt;:&lt;guest port&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">variable=value</span>
</span></span></code></pre></div><h2 id="a-real-world-example-1">A real world example</h2>
<p>First, the minimal configuration is created to create a gitea server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">gitea</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">./ </span> <span style="color:#75715e"># The Dockerfile is located in the same directory as this file</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">gitea</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD/gitea_files/var/lib/gitea:/var/lib/gitea&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD/gitea_files/etc/gitea:/etc/gitea&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;3000:3000&#34;</span>
</span></span></code></pre></div><p>The <code>version</code> entry is often set to <code>3</code> or <code>3.x</code>. If the given version is too old, docker-compose will start complaining. This <code>docker-compose.yml</code> file contains one service called <code>gitea</code>, with container name <code>gitea</code>.</p>
<p>Volumes are a mapped directory from guest to host, where <code>/var/lib/gitea</code> and <code>/etc/gitea</code> are folders inside the container. These two folders are mapped to <code>$PWD/gitea_files/var/lib/gitea</code> and <code>$PWD/gitea_files/etc/gitea</code> respectively. After the container has run at least one time, the container files can be viewed from the host OS by entering the <code>gitea_files</code> folder.</p>
<p>Normally, when no volumes are created, each container forgets what it was doing when it stops running. This is not very desireable. When there is a power outage for example, each container would have to be re-configured. When volumes are present in <code>docker-compose.yml</code>, Docker will automatically restore all files in the volumes based on the files from the host OS. This would mean that the gitea server will restore the files for <code>/var/lib/gitea</code> (where the git repositories are located) as well as <code>/etc/gitea</code> (where the configuration files are stored). All the other files in the container (like the binaries in <code>/usr/bin</code>) do not have to be restored, and thus do not need a volume.</p>
<h1 id="starting-the-container">Starting the container</h1>
<p>To start the docker container, the following command is executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># build and start all containers</span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><p>The gitea Docker container will now be built and run. The build process will only happen once. Next time the container is run, it will start without having to be built. The <code>--build</code> option can therefore be left out if a container is already built.</p>
<h2 id="testing-the-container">Testing the container</h2>
<p>If a browser is now opened and the url <code>http://localhost:3000</code> is visited, the gitea setup screen will appear. This means that the container is running as expected. An image of part of the setup screen is shown below:</p>
<p><a href="/posts/docker/images/gitea_setup.png"><img alt="Gitea setup with default options" src="/posts/docker/images/gitea_setup.png"></a></p>
<h2 id="adding-another-container">Adding another container</h2>
<p>By default, gitea is set to use a <code>SQLite3</code> SQL server. This SQL server is very lightweight, but can only handle one connection at a time. This would mean that gitea would stop working if multiple users started using it. This is not very desireable.</p>
<p>For this reason, another container will be created in the <code>docker-compose.yml</code>. This container will contain a complete MySQL server. The <code>docker-compose.yml</code> file will now look as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># build gitea using a Dockerfile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">gitea</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>: <span style="color:#ae81ff">./</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">gitea</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD/gitea_files/var/lib/gitea:/var/lib/gitea&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD/gitea_files/etc/gitea:/etc/gitea&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;3000:3000&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># add another container, containing a mysql image from docker hub</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mariadb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">mariadb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD/mariadb_files/var/lib/mysql:/var/lib/mysql&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>: <span style="color:#ae81ff">example_root_password</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_USER</span>: <span style="color:#ae81ff">example_user</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_PASSWORD</span>: <span style="color:#ae81ff">example_password</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">MYSQL_DATABASE</span>: <span style="color:#ae81ff">example_database</span>
</span></span></code></pre></div><p>A docker container containing a mariadb database server is now added to the list of containers. Another volume is created to make sure that all database related files are transferable to another computer at a later time.</p>
<p>When the containers are now (re) started using the command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># build and start all containers</span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><p>the gitea container as well as a mariadb server is started.</p>
<h2 id="communication-between-containers">Communication between containers</h2>
<p>The cool thing about Docker containers is that they can talk to each other in a very nice way. How this works can be seen when configuring gitea. Normally, the IP address and port have to be inserted. Because the mariadb server is also a Docker container, gitea can be configured to talk to <code>mariadb:3306</code>. Docker will then automatically translate the <code>mariadb</code> part to the IP address of the mariadb container. This way, the two containers can always talk to each other. The database configuration for gitea now looks as follows:</p>
<p><a href="/posts/docker/images/gitea_db_setup.png"><img alt="Gitea database settings" src="/posts/docker/images/gitea_db_setup.png"></a></p>
<p>Gitea will always know where the database is, since Docker will always provide the right IP address (also when the docker containers are restarted later). In addition to that, both the gitea and database container will always run together.</p>
<p>Because the Dockerfile for the gitea server is so minimal, the option <code>Run as user</code> is changed from <code>gitea</code> to <code>root</code>, since the <code>gitea</code> user does not exist within the container (programs should run as a non-root user within a docker container if it&rsquo;s a production server!).</p>
<p>After all configurations are saved, the gitea server is operational and can be used to store projects.</p>
<h1 id="docker-images">Docker images</h1>
<p>For most containers on Docker Hub, the needed docker-compose configuration is given. For some images however, only a command to start a container is given. An example of this is an unofficial <a href="https://hub.docker.com/r/creativitykills/nginx-php-server">nginx and php image</a>. At the time of writing, the description contains the following command to start the container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d -p 4488:80 --name<span style="color:#f92672">=</span>testapp -v $PWD:/var/www creativitykills/nginx-php-server
</span></span></code></pre></div><p>The options can be &ldquo;converted&rdquo; into a service and added to <code>docker-compose.yml</code> as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">nginx_php</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">creativitykills/nginx-php-server</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">testapp</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;$PWD:/var/www&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4488:80&#34;</span>
</span></span></code></pre></div><p>The docker image can now be managed by docker-compose and works exactly the same as it would without docker-compose.</p>
<h1 id="more-options">More options</h1>
<p>There are more options to Dockerfiles and docker-compose configurations. One example is setting up an <a href="https://hub.docker.com/r/erichough/nfs-server">nfs server container</a>, where the container has (to have) access to some parts of the host OS. For most of these images, the needed configurations/options are given.</p>
<h1 id="migrating-to-another-computer">Migrating to another computer</h1>
<p>Migrating to another computer is really simple: just copy the <code>Dockerfile</code>, <code>docker-compose.yml</code> and volume-directories to another computer. That&rsquo;s it! No need to configure a new OS. Just install Docker, copy the files, rebuild the container(s) and it&rsquo;s all done.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Docker is not too difficult to learn and is a great way to containerize many applications. Once a simple docker container is created using a <code>Dockerfile</code> and a <code>docker-compose.yml</code> file, many more features can be added. If there are containers that need to talk to eachother, it&rsquo;s all possible! And migrating the whole setup to another computer is just copying files, instead of re-configuring an entire OS.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating a minimal OS using buildroot (Raspberry Pi)</title>
            <link>https://tomniesse.github.io/posts/buildroot/</link>
            <pubDate>Thu, 18 Nov 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/buildroot/</guid>
            <description>What is an embedded OS? An Embedded Operating System is an Operating System designed to run on specific hardware. For example, many smart TV&amp;rsquo;s these days are running an embedded OS. Because the OS is made for the specific hardware, it can be configured to start up in the blink of an eye.
What is Buildroot? Buildroot, just like the yocto project, is a set of tools to help automate the build process of an embedded Linux based OS.</description>
            <content type="html"><![CDATA[<h1 id="what-is-an-embedded-os">What is an embedded OS?</h1>
<p>An Embedded Operating System is an Operating System designed to run on specific hardware. For example, many smart TV&rsquo;s these days are running an embedded OS. Because the OS is made for the specific hardware, it can be configured to start up in the blink of an eye.</p>
<h1 id="what-is-buildroot">What is Buildroot?</h1>
<p>Buildroot, just like the <a href="https://www.yoctoproject.org/">yocto project</a>, is a set of tools to help automate the build process of an embedded Linux based OS. Buildroot is configured through a set of configuration files, after which it builds an entire Linux based OS.</p>
<h1 id="what-are-the-benefits-of-creating-a-custom-embedded-os">What are the benefits of creating a custom embedded OS?</h1>
<p>There are a few great benefits to creating a custom embedded OS (and not using a prebuilt image file):</p>
<ul>
<li>The kernel and root filesystem can be seperated from the bootloader and stored on a remote server, to make the local system image really small.</li>
<li>If Buildroot is configured to only create a root filesystem, the resulting OS can run from a bootloader and/or kernel that is not built by Buildroot.</li>
<li>The U-boot bootloader is very configurable and can be configured to start the right kernel for the right Raspberry Pi board if needed. This includes downloading the right kernel (and device tree) from a remote server and then booting it.</li>
<li>The embedded OS built by buildroot supports many init systems (busybox, openrc, systemd, etc.).</li>
<li>The embedded OS is <em>very</em> minimal. This saves space and teaches how a Linux based OS works.</li>
<li>Almost any program that would normally run on Raspberry Pi OS (formerly called Raspbian) can easily be cross-compiled during the build process. This includes using CMake.</li>
<li>There are many debugging tools that can be built into the embedded OS to debug a certain application.</li>
<li>The cross-compiling toolchain can be fully configured within Buildroot. An external cross-compiling toolchain can also be used if desired (<a href="https://crosstool-ng.github.io">crosstool-NG</a> for example).</li>
</ul>
<h1 id="the-goal">The goal</h1>
<p>In this post, a basic Buildroot OS will be created. This will be a minimal build; it boots but is utterly useless. At the end of this post, the minimal Buildroot OS will be used for two other projects:</p>
<ul>
<li>Creating an OS that serves as an access point.</li>
<li>Cross-compiling <a href="https://liballeg.org">Allegro5</a> and <a href="https://dunedynasty.sourceforge.net">Dune Dynasty</a> and adding it to the minimal OS.</li>
</ul>
<h1 id="setting-up-a-cross-compiling-toolchain">Setting up a cross-compiling toolchain</h1>
<p>If the kernel is compiled using <code>arm-none-eabi-gcc</code> and the rest of the system is compiled using <code>aarch64-linux-gnu-gcc</code>, the system will not run. To ensure that the system runs (well) on the target board, a cross-compiling toolchain will be set up. This toolchain contains a cross-compiling <code>gcc</code>, <code>ld</code> and other tools that would normally be used to (cross-)compile a program or OS. The tools in the toolchain will be used to compile the whole system.</p>
<p>In this post, <a href="https://crosstool-ng.github.io">crosstool-NG</a> is used.</p>
<h2 id="downloading">Downloading</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/crosstool-ng/crosstool-ng
</span></span></code></pre></div><h2 id="compiling">Compiling</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./bootstrap <span style="color:#75715e"># only if crosstool-NG is cloned from github</span>
</span></span><span style="display:flex;"><span>./configure --enable-local
</span></span><span style="display:flex;"><span>make
</span></span></code></pre></div><h2 id="configuring-a-cross-compiling-toolchain">Configuring a cross-compiling toolchain</h2>
<p>The command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng list-samples
</span></span></code></pre></div><p>will give a list of possible targets to compile for. The entry <code>aarch64-rpi4-linux-gnu</code> is used by executing the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng aarch64-rpi4-linux-gnu
</span></span></code></pre></div><p>Because the GNU C library is quite big compared to something like uClibc, the <code>.config</code> file will be edited to use uClibc instead of the GNU C library. The goal is to make the target system a little smaller in disk size. The <code>.config</code> file is edited using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng menuconfig
</span></span></code></pre></div><p>The following changes were made inside the menuconfig menu:</p>
<ul>
<li>Under <code>C library</code>, the option <code>C library</code> is changed to <code>uClibc</code></li>
</ul>
<p>Then the menuconfig is exited and restarted to reload all options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng menuconfig
</span></span></code></pre></div><ul>
<li>Under <code>C library</code>, the option <code>Add support for locales</code> is enabled</li>
<li>Under <code>C library</code>, the option <code>Add support for IPv6</code> is enabled</li>
<li>Under <code>C library</code>, the option <code>enable iconv</code> is enabled</li>
<li>Under <code>C library</code>, the option <code>Add support for fenv.h</code> is enabled</li>
<li>Under <code>C compiler</code>, the option <code>Version of gcc</code> is set to the second to latest version (at time of writing this was set to version <code>10.3.0</code>)</li>
<li>Under <code>C compiler</code>, the option <code>C++</code> is enabled</li>
<li>Under <code>Operating system</code>, the option <code>Version of linux</code> is set to the latest version (at time of writing this was version <code>5.15.2</code>)</li>
<li>Under <code>Debug facilities</code>, the option <code>gdb</code> is disabled (optional)</li>
<li>Under <code>Toolchain options</code>, the option <code>Tuple's alias</code> is set to <code>toolchain</code> (optional)</li>
</ul>
<h2 id="building-the-toolchain">Building the toolchain</h2>
<p>After the toolchain is configured, it can be built using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./ct-ng build -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>This build process will take a <em>long</em> time. Therefore, it should <em>not</em> be done in a (misconfigured) VM, but on a pc with lots of cores and/or threads. This can reduce the build time from a day to a few hours (maybe even less).</p>
<h2 id="checking-if-the-toolchain-works">Checking if the toolchain works</h2>
<p>After crosstool-NG is done creating a toolchain, a folder called <code>x-tools</code> can be found in the home-directory of the current user (<code>/home/$USER/x-tools</code>). Inside the <code>x-tools</code> directory, all cross-compiling toolchains can be found. To test if the new toolchain is the right version, the following command is executed inside <code>/home/$USER/x-tools/aarch64-rpi4-linux-uclibc/bin</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>toolchain-gcc -v
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or, if the &#34;Tuple&#39;s alias&#34; option was not set when configuring the toolchain:</span>
</span></span><span style="display:flex;"><span>aarch64-rpi4-linux-uclibc-gcc -v
</span></span></code></pre></div><p>The executed binary states that it is version <code>10.3.0</code>, just like the version that was specified in the menuconfig of crosstool-NG. For now, it is assumed that the binary will cross-compile without errors.</p>
<h1 id="creating-a-basic-buildroot-os">Creating a basic Buildroot OS</h1>
<h2 id="downloading-buildroot">Downloading Buildroot</h2>
<p>To get started, Buildroot can be downloaded from the <a href="https://buildroot.org/download.html">Buildroot website</a>. There are two download options to choose from; &ldquo;LTS&rdquo; or &ldquo;stable&rdquo;. For newer devices, the stable option is a good option. For this blog, the stable <em>.tar.gz</em> archive is used.</p>
<h2 id="extracting">Extracting</h2>
<p>To extract the <em>.tar.gz</em> file, the following command can be executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tar -xvf buildroot-&lt;VERSION_GOES_HERE&gt;.tar.gz
</span></span></code></pre></div><h2 id="initial-setup">Initial setup</h2>
<p>To view the target devices Buildroot can build systems for, the following command can be executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make list-defconfigs
</span></span></code></pre></div><p>To configure Buildroot to build for the Raspberry Pi 4 (64 bit), the following command can be issued from the Buildroot directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make raspberrypi4_64_defconfig
</span></span></code></pre></div><p>To then configure the system, run the following command:</p>
<h2 id="configuring-the-target-system">Configuring the target system</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make menuconfig
</span></span></code></pre></div><p>For this post, the following changed were made to the configuration:</p>
<ul>
<li>Under <code>Build options</code>, the option <code>Enable compiler cache</code> is enabled</li>
<li>Under <code>Bootloaders</code>, all the options are disabled (the bootloader will be compiled manually)</li>
<li>Under <code>Filesystem images</code>, the option <code>ext2/3/4 root filesystem</code> is disabled</li>
<li>Under <code>Filesystem images</code>, the option <code>tar the root filesystem</code> is enabled, along with the <code>Compression method</code> set to <code>gzip</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain type</code> is set to <code>External toolchain</code> (this post uses a toolchain built by crosstool-NG)</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain</code> is set to <code>Custom toolchain</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain origin</code> is set to <code>Pre-installed toolchain</code></li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain path</code> is set to <code>/home/&lt;YOUR_USERNAME_GOES_HERE&gt;/x-tools/aarch64-rpi4-linux-uclibc</code> (the path has to be absolute and may not contain <code>~/</code> or <code>/home/$USER/</code>!).</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain prefix</code> is set to <code>aarch64-rpi4-linux-uclibc</code></li>
<li>Under <code>Toolchain</code>, the option <code>External toolchain gcc version</code> is set to <code>10.x</code> (this version has to match the version of the cross-compiling toolchain)</li>
<li>Under <code>Toolchain</code>, the option <code>External toolchain kernel headers series</code> is set to <code>5.15.x or later</code> (this version has to match the version of the cross-compiling toolchain)</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has locale support?</code> is enabled</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has C++ support?</code> is enabled</li>
<li>Under <code>Toolchain</code>, the option <code>Toolchain has SSP support?</code> is enabled</li>
<li>Under <code>System configuration</code>, the option <code>System hostname</code> is set to <code>embedded</code></li>
<li>Under <code>System configuration</code>, the option <code>System banner</code> is set to <code>Welcome to embedded OS!</code></li>
<li>Under <code>System configuration</code>, the option <code>Root password</code> is set to <code>root</code> (for testing test builds)</li>
<li>Under <code>System configuration</code>, the option <code>/dev management</code> is set to <code>Dynamic using devtmpfs + mdev</code> (to load drivers automatically when the target device boots)</li>
</ul>
<p>Most linux desktops use <code>udev</code> to manage device drivers, but because this system uses <code>BusyBox</code> as init system, so <code>mdev</code> is used. To enable <code>mdev</code> at boot, the file <code>buildroot-&lt;VERSION_GOES_HERE&gt;/board/raspberrypi/post-build.sh</code> needs the following extra lines at the bottom, leaving the rest of the file as is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cp package/busybox/S10mdev <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S10mdev
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">755</span> <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/init.d/S10mdev
</span></span><span style="display:flex;"><span>cp package/busybox/mdev.conf <span style="color:#e6db74">${</span>TARGET_DIR<span style="color:#e6db74">}</span>/etc/mdev.conf
</span></span></code></pre></div><h2 id="building">Building</h2>
<p>To build the embedded OS, the following command can be executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>make clean <span style="color:#f92672">&amp;&amp;</span> make
</span></span></code></pre></div><p>The reason for the <code>make clean</code> part is that Buildroot remembers <em>a lot</em>, and will sometimes refuse to build (correctly) because of a cached configuration.</p>
<h2 id="after-compiling">After compiling</h2>
<p>When buildroot is done compiling, a file called <code>rootfs.tar.gz</code> can be found in the <code>output/images</code> folder. This is the entire embedded OS, minus the bootloader. The bootloader will be compiled manually.</p>
<p>The same <code>output/images</code> folder also contains a linux image called <code>Image</code>. This image needs to be converted into a U-boot image (<code>uImage</code>)</p>
<p>In addition to the <code>rootfs.tar.gz</code> file being present, the folder <code>output/images</code> will also contain a folder called <code>rpi-firmware</code>.<br>
The files, <code>start4.elf</code> and <code>fixup4.dat</code> are needed later. These firmware files are files needed to boot the Raspberry Pi 4.</p>
<h2 id="converting-the-linux-image-into-a-uimage">Converting the linux Image into a uImage</h2>
<p>Buildroot created a file called <code>Image</code>. However, the U-boot bootloader (which wil be built in the next chapter) cannot boot this image file as it is. In order for U-boot to boot the kernel, the image file has to be converted to a U-boot image (<code>uImage</code>).</p>
<p>To convert the linux image into a uImage, the package <code>u-boot-tools</code> (or <code>uboot-tools</code>) is required. Then the <code>Image</code> file can be converted using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkimage -n <span style="color:#e6db74">&#39;Linux kernel&#39;</span> -A arm64 -O linux -C none -T kernel -a 0x00080000 -e 0x00080000 -d arch/arm64/boot/Image uImage
</span></span></code></pre></div><p>A file called <code>uImage</code> will now be created. This file contains the entire linux kernel binary, including some extra header stuff that <code>u-boot-tools</code> added. This file is the kernel which runs the system.</p>
<h1 id="adding-a-bootloader-u-boot">Adding a bootloader (U-boot)</h1>
<p>Although Buildroot can include the U-boot bootloader (among others) by enabling some settings, it might be nice to go a little more in depth to learn how U-boot actually works.</p>
<h2 id="downloading-u-boot">Downloading U-boot</h2>
<p>The U-boot bootloader can be downloaded from <a href="https://github.com/u-boot/u-boot">github</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/u-boot/u-boot
</span></span><span style="display:flex;"><span>cd u-boot/
</span></span></code></pre></div><h2 id="configuring-the-u-boot-source">Configuring the U-boot source</h2>
<p>To see which default configurations U-boot has, execute the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ls configs
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or, to only see raspberry pi entries</span>
</span></span><span style="display:flex;"><span>ls configs | grep rpi
</span></span></code></pre></div><p>To create a basic configuration for the Raspberry Pi 4, the following command can be executed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-uclibc/bin/aarch64-rpi4-linux-uclibc- make rpi_4_defconfig
</span></span></code></pre></div><p>To then further configure the source, the <code>make menuconfig</code> command can be given:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-uclibc/bin/aarch64-rpi4-linux-uclibc- make menuconfig
</span></span></code></pre></div><p>In this post, the autoboot timer is changed from <code>2</code> to <code>0</code> for production-builds. This option can be changed in the following region:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Boot options -&gt;
</span></span><span style="display:flex;"><span>    Autoboot options -&gt;
</span></span><span style="display:flex;"><span>        delay in seconds before automatically booting
</span></span></code></pre></div><p>For test builds, it is recommended to leave this value as is.</p>
<h2 id="compiling-u-boot">Compiling U-boot</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ARCH<span style="color:#f92672">=</span>arm64 CROSS_COMPILE<span style="color:#f92672">=</span>~/x-tools/aarch64-rpi4-linux-uclibc/bin/aarch64-rpi4-linux-uclibc- make -j<span style="color:#e6db74">`</span>nproc<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>The compile process will not take long. After the compilation is complete, a file called <code>u-boot.bin</code> (the U-boot binary) will exist.</p>
<h2 id="creating-raspberry-pi-boot-configuration">Creating Raspberry Pi boot configuration</h2>
<p>Normally, the Raspberry Pi 4 boots a file called <code>kernel.img</code> (sometimes <code>kernel&lt;version number here&gt;.img</code>). In this post, the Raspberry Pi 4 should start the U-boot bootloader instead of the kernel. This can be done by creating a file called <code>config.txt</code> with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Enable UART communication</span>
</span></span><span style="display:flex;"><span>enable_uart<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Enable 64 bit mode</span>
</span></span><span style="display:flex;"><span>arm_64bit<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make the raspberry Pi 4 start U-boot (u-boot.bin) instead of the default kernel8.img</span>
</span></span><span style="display:flex;"><span>kernel<span style="color:#f92672">=</span>u-boot.bin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If the bluetooth device interferes with any uart/serial messages, uncomment this</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#dtoverlay=miniuart-bt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment to go fast</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#arm_boost=1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment to enable DRM VC4 V3D driver</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#dtoverlay=vc4-kms-v3d</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#max_framebuffers=2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment to disable overscan</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#disable_overscan=1</span>
</span></span></code></pre></div><h2 id="creating-a-u-boot-boot-script">Creating a U-boot boot script</h2>
<p>By default, when the U-boot bootloader starts up, it will look for a file called <code>boot.scr</code>. The <code>boot.scr</code> file is a boot script. This script will be used to load the kernel (<code>uImage</code>) and device tree (<code>bcm2711-rpi-4-b.dtb</code>) into memory and boot the system.</p>
<p>To create a bootscript, a file called <code>boot.txt</code> is created. This file will be converted to <code>boot.scr</code> and contains the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sleep <span style="color:#ae81ff">1</span> <span style="color:#75715e"># some SD cards are slow and will fail to list files in time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>echo +-----------------------------------------------------------+
</span></span><span style="display:flex;"><span>echo +----------------Embedded OS is starting!-------------------+
</span></span><span style="display:flex;"><span>echo +-----------------------------------------------------------+
</span></span><span style="display:flex;"><span>echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo ++++ Setting kernel parameters ++++++++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>setenv bootargs <span style="color:#e6db74">&#39;dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 kgdboc=ttyAMA0,115200 root=/dev/mmcblk0p2 rootwait&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo ++++ Loading kernel into memory +++++++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>load mmc <span style="color:#ae81ff">0</span> $kernel_addr_r uImage
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo ++++ Loading device tree into memory ++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>load mmc <span style="color:#ae81ff">0</span> $fdt_addr_r bcm2711-rpi-4-b.dtb
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo ++++ Starting system ++++++++++++++++++++++++++++++++++++++++
</span></span><span style="display:flex;"><span>bootm $kernel_addr_r - $fdt_addr_r
</span></span></code></pre></div><p>The <code>boot.txt</code> file is then converted to <code>boot.scr</code> using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkimage -A arm64 -O linux -T script -C none -a <span style="color:#ae81ff">0</span> -e <span style="color:#ae81ff">0</span> -n <span style="color:#e6db74">&#34;bootscript&#34;</span> -d boot.txt boot.scr
</span></span></code></pre></div><h1 id="creating-a-system-image">Creating a system image</h1>
<h2 id="creating-an-image-file">Creating an image file</h2>
<p>To create partitions, the program <code>parted</code> will be used. There will be two partitions: a boot partition called <code>BOOT</code> and a root partition called <code>ROOTFS</code>. The boot partition will have a fat16 filesystem and the root filesystem will use the ext4 filesystem.</p>
<p>To prevent disks from being destroyed, a virtual disk image will be created using dd:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># create a file called `system.img` with a size of 600MiB</span>
</span></span><span style="display:flex;"><span>dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/zero of<span style="color:#f92672">=</span>system.img bs<span style="color:#f92672">=</span>1MiB count<span style="color:#f92672">=</span><span style="color:#ae81ff">600</span> status<span style="color:#f92672">=</span>progress
</span></span></code></pre></div><p>Then, this virtual disk image will be partitioned using <code>parted</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>parted system.img
</span></span></code></pre></div><p>Within <code>parted</code>, run the <code>mklabel</code> command and set the partition table type to <code>msdos</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> mklabel msdos
</span></span></code></pre></div><p>Then create the boot and root partitions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> mkpart primary fat16 2048s 30MiB
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> mkpart primary ext4 30MiB 100%
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> set <span style="color:#ae81ff">1</span> boot on
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> print
</span></span></code></pre></div><p>When done, exit parted by entering <code>quit</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>parted<span style="color:#f92672">)</span> quit
</span></span></code></pre></div><h2 id="partitioning-the-system-image">Partitioning the system image</h2>
<p>First, mount the virtual disk image as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a variable for the mount drive path</span>
</span></span><span style="display:flex;"><span>SYSTEM_IMAGE<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>sudo losetup -Pf system.img --show<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>Normally, disk devices in linux have paths like <code>/dev/sda</code>, <code>/dev/sdb</code>, <code>/dev/mmcblk0</code>, etc. This virtual device will have the path <code>/dev/loop0</code>. Multiple virtual devices can be mounted. The next mounted virtual disks will have the path <code>/dev/loop1</code>, <code>/dev/loop2</code>, <code>/dev/loop3</code>, etc.</p>
<p>In this post, the path to the virtual disk is stored in the <code>SYSTEM_IMAGE</code> variable. To view the path to the virtual disk device, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo $SYSTEM_IMAGE
</span></span></code></pre></div><p>Then, partition it using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create actual partitions for boot and rootfs now</span>
</span></span><span style="display:flex;"><span>sudo mkfs.vfat -n BOOT <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p1&#34;</span><span style="color:#e6db74">`</span>   <span style="color:#75715e"># Create a fat16 partition for boot files</span>
</span></span><span style="display:flex;"><span>sudo mkfs.ext4 -L ROOTFS <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p2&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e"># Create an ext4 partition for rootfs files</span>
</span></span></code></pre></div><h2 id="mounting-the-partitions">Mounting the partitions</h2>
<p>To mount the system image, use the following commands to mount the virtual disk image to a folder called <code>target_mnt</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir ./target_mnt
</span></span><span style="display:flex;"><span>sudo mount <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p2&#34;</span><span style="color:#e6db74">`</span> ./target_mnt
</span></span><span style="display:flex;"><span>sudo mkdir ./target_mnt/boot
</span></span><span style="display:flex;"><span>sudo mount <span style="color:#e6db74">`</span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SYSTEM_IMAGE<span style="color:#e6db74">}</span><span style="color:#e6db74">p1&#34;</span><span style="color:#e6db74">`</span> ./target_mnt/boot
</span></span></code></pre></div><h2 id="copying-boot-files">Copying boot files</h2>
<p>First, all required firmware files will be copied from the buildroot output folder to the boot folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cp ./buildroot-&lt;VERSION_GOES_HERE&gt;/output/images/bcm2711-rpi-4-b.dtb ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-&lt;VERSION_GOES_HERE&gt;/output/images/rpi-firmware/start4.elf ./target_mnt/boot/
</span></span><span style="display:flex;"><span>sudo cp ./buildroot-&lt;VERSION_GOES_HERE&gt;/output/images/rpi-firmware/fixup4.dat ./target_mnt/boot/
</span></span></code></pre></div><p>Then, the kernel is copied to the boot folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo cp ./buildroot-&lt;VERSION_GOES_HERE&gt;/output/images/uImage ./target_mnt/boot/
</span></span></code></pre></div><p>After that, the bootloader and related configurations are copied to the boot folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Copy the bootloader</span>
</span></span><span style="display:flex;"><span>sudo cp ./u-boot/u-boot.bin ./target_mnt/boot/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy config.txt, to the Raspberry Pi boots U-boot</span>
</span></span><span style="display:flex;"><span>sudo cp ./u-boot/config.txt ./target_mnt/boot/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy boot.scr, this bootscript starts the embedded OS</span>
</span></span><span style="display:flex;"><span>sudo cp ./u-boot/boot.scr ./target_mnt/boot/
</span></span></code></pre></div><h2 id="extracting-the-root-filesystem-to-the-rootfs-partition">Extracting the root filesystem to the <code>ROOTFS</code> partition</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ./target_mnt
</span></span><span style="display:flex;"><span>sudo tar -xvf ../buildroot-&lt;VERSION_GOES_HERE&gt;/output/images/rootfs.tar.gz .
</span></span><span style="display:flex;"><span>cd ../
</span></span></code></pre></div><h2 id="unmounting-the-image">Unmounting the image</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo sync
</span></span><span style="display:flex;"><span>sudo umount ./target_mnt/boot -l
</span></span><span style="display:flex;"><span>sudo umount ./target_mnt -l
</span></span><span style="display:flex;"><span>sudo losetup -D
</span></span><span style="display:flex;"><span>sudo rm -rf ./target_mnt
</span></span></code></pre></div><h1 id="flashing-the-virtual-disk-image-to-an-sd">Flashing the virtual disk image to an SD</h1>
<p>The <code>system.img</code> file (which now contains the entire embedded OS) can be flashed to an SD card using <code>dd</code> as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>system.img of<span style="color:#f92672">=</span>/dev/YOUR_DEVICE_GOES_HERE bs<span style="color:#f92672">=</span>1MiB status<span style="color:#f92672">=</span>progress
</span></span><span style="display:flex;"><span>sudo sync
</span></span></code></pre></div><p>Since <code>system.img</code> is an image file the flashing process is exactly the same as all other &ldquo;Raspberry Pi Linux distro&rsquo;s&rdquo;.<br>
Therefore, if <code>dd</code> seems too scary, the following tools can be used to flash the <code>system.img</code> file:<br>
<a href="https://www.raspberrypi.com/software">Raspberry Pi Imager</a>,<br>
<a href="https://www.balena.io/etcher">Etcher</a>,<br>
<a href="https://wiki.gnome.org/Apps/Disks">GNOME Disks</a> or<br>
<a href="https://community.chocolatey.org/packages/win32diskimager">Win32 Disk Imager</a>.</p>
<!-- # Extra's

There are two other posts that use this basic buildroot OS to create two other projects:

- [Creating an access point](/?blog%2Fbuildroot_routerOS)
- [Adding Allegro5 and a Dune Dynasty remake to the basic Buildroot OS](/?blog%2Fbuildroot_dune_dynasty) -->
<h1 id="sources">Sources</h1>
<ul>
<li><a href="https://bootlin.com/doc/training/buildroot/buildroot-slides.pdf">https://bootlin.com/doc/training/buildroot/buildroot-slides.pdf</a></li>
<li><a href="https://blog.crysys.hu/2018/06/enabling-wifi-and-converting-the-raspberry-pi-into-a-wifi-ap/">https://blog.crysys.hu/2018/06/enabling-wifi-and-converting-the-raspberry-pi-into-a-wifi-ap/</a></li>
<li><a href="https://unix.stackexchange.com/questions/439559/udhcpc-no-lease-failing-when-booting-on-embedded-linux-created-by-buildroot">https://unix.stackexchange.com/questions/439559/udhcpc-no-lease-failing-when-booting-on-embedded-linux-created-by-buildroot</a></li>
<li><a href="https://raspberrypi.stackexchange.com/questions/107858/raspberry-pi-4-b-5ghz-wifi-access-point-problem">https://raspberrypi.stackexchange.com/questions/107858/raspberry-pi-4-b-5ghz-wifi-access-point-problem</a></li>
<li><a href="http://lists.busybox.net/pipermail/buildroot/2019-June/252256.html">http://lists.busybox.net/pipermail/buildroot/2019-June/252256.html</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>C and SDL2 programming</title>
            <link>https://tomniesse.github.io/posts/c-sdl2-programming/</link>
            <pubDate>Thu, 04 Nov 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/c-sdl2-programming/</guid>
            <description>Working with SDL2 and C This post will show snippets of code that can be used to make an SDL2 application. This post serves mostly as a personal reminder of how the basics of SDL2 work. Much more advanced things can be done using SDL2, especially if it&amp;rsquo;s combined with a language like C++. C++ has classes, which make it much easier to create more advanced programs (like a basic game).</description>
            <content type="html"><![CDATA[<h1 id="working-with-sdl2-and-c">Working with SDL2 and C</h1>
<p>This post will show snippets of code that can be used to make an SDL2 application. This post serves mostly as a personal reminder of how the basics of SDL2 work. Much more advanced things can be done using SDL2, especially if it&rsquo;s combined with a language like C++. C++ has classes, which make it much easier to create more advanced programs (like a basic game).</p>
<h2 id="what-is-sdl2">What is SDL2?</h2>
<p>The libSDL <a href="https://www.libsdl.org/">website</a> describes the software as follows:</p>
<blockquote>
<p>&ldquo;Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to<br>
audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.&rdquo;</p>
</blockquote>
<p>So, SDL2 is not like visual studio where you can drag and drop buttons into place. It is a lower level library which can draw 2D lines, squares, images and text. That&rsquo;s it. If you want buttons, you create them yourself. If you want some sort of clickable menu, you have to create it. SDL2 does help a lot by making difficult parts easier, for example the ability to play audio or display an image on the screen.</p>
<h2 id="creating-a-window-that-opens-and-closes">Creating a window that opens and closes</h2>
<p>Before any drawing can begin, a window and renderer have to be created. After the program window opens and closes without errors, other elements can be created.</p>
<p>Code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stddef.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdbool.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;math.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL2/SDL.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL2/SDL_image.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL2/SDL_ttf.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL2/SDL_mixer.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define WINDOW_WIDTH 640
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define WINDOW_HEIGHT 480
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sdl2_create_window</span>(SDL_Window<span style="color:#f92672">**</span> window, SDL_Renderer<span style="color:#f92672">**</span> renderer, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> window_title) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> window_flags <span style="color:#f92672">=</span> SDL_WINDOW_RESIZABLE;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> renderer_flags <span style="color:#f92672">=</span> SDL_RENDERER_PRESENTVSYNC <span style="color:#f92672">|</span> SDL_RENDERER_ACCELERATED; <span style="color:#75715e">// Use hardware rendering and vsync
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">SDL_Init</span>(SDL_INIT_VIDEO) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Couldn&#39;t initialize SDL: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">SDL_GetError</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>window <span style="color:#f92672">=</span> <span style="color:#a6e22e">SDL_CreateWindow</span>(window_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, window_flags);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (window <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Failed to create window: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">SDL_GetError</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>renderer <span style="color:#f92672">=</span> <span style="color:#a6e22e">SDL_CreateRenderer</span>(<span style="color:#f92672">*</span>window, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, renderer_flags);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (renderer <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Failed to create renderer: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">SDL_GetError</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    SDL_Window<span style="color:#f92672">*</span> window <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>    SDL_Renderer<span style="color:#f92672">*</span> renderer <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>    SDL_Event event;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> running <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Create a new window to run the in
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">sdl2_create_window</span>(<span style="color:#f92672">&amp;</span>window, <span style="color:#f92672">&amp;</span>renderer, <span style="color:#e6db74">&#34;SDL2 example&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Main loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">while</span>(running) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">SDL_SetRenderDrawColor</span>(renderer, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, SDL_ALPHA_OPAQUE);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SDL_RenderClear</span>(renderer);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Do rendering here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Check if the close button is pressed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// and break out of the loop if it is.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">SDL_PollEvent</span>(<span style="color:#f92672">&amp;</span>event)) {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>(event.type <span style="color:#f92672">==</span> SDL_QUIT) {
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// The program needs to stop running!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				running <span style="color:#f92672">=</span> false;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SDL_RenderPresent</span>(renderer);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Stop everything
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">SDL_DestroyRenderer</span>(renderer);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SDL_DestroyWindow</span>(window);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SDL_Quit</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Makefile to create the binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>CC <span style="color:#f92672">=</span> gcc
</span></span><span style="display:flex;"><span>CFLAGS <span style="color:#f92672">=</span> -std<span style="color:#f92672">=</span>c99 -Wall -Wextra -Wconversion -Ofast -Wpedantic -Werror <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>         <span style="color:#e6db74">`</span>sdl2-config --cflags<span style="color:#e6db74">`</span> -lSDL2 -lSDL2_ttf -lSDL2_image -lSDL2_mixer -lm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	@echo Building...
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>CC<span style="color:#66d9ef">)</span> src/main.c -o main <span style="color:#66d9ef">$(</span>CFLAGS<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>When the resulting binary is executed, the follwing empty window should appear:</p>
<p><a href="/posts/c-sdl2-programming/images/example_window.png"><img alt="SDL2 empty window" src="/posts/c-sdl2-programming/images/example_window.png"></a></p>
<h2 id="small-code-examples">Small code examples</h2>
<h3 id="drawing-a-line">Drawing a line</h3>
<p>To draw a line over the whole window, the following code can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Get begin and end values for the line
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> x_start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> y_start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> x_end, y_end;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Make sure the line ends at the bottom right of the screen
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_GetWindowSize</span>(window, <span style="color:#f92672">&amp;</span>x_end, <span style="color:#f92672">&amp;</span>y_end);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Set the line color
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_SetRenderDrawColor</span>(renderer, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, SDL_ALPHA_OPAQUE);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Draw the line
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_RenderDrawLine</span>(renderer, x_start, y_start, x_end, y_end);
</span></span></code></pre></div><p>If the application is now compiled and run again, a line should appear on the screen, going from the top left <code>(0,0)</code> to the bottom right <code>(&lt;window width&gt;,&lt;window height&gt;)</code>. The line also changes shape when the window gets resized:</p>
<p><a href="/posts/c-sdl2-programming/images/sdl2_line_high.png"><img alt="SDL2 high line" src="/posts/c-sdl2-programming/images/sdl2_line_high.png"></a></p>
<p><a href="/posts/c-sdl2-programming/images/sdl2_line_wide.png"><img alt="SDL2 wide line" src="/posts/c-sdl2-programming/images/sdl2_line_wide.png"></a></p>
<h2 id="drawing-a-rectangle">Drawing a rectangle</h2>
<p>Drawing a rectangle is something SDL2 can do by itself. It can either draw only the outline or fill it in with a color.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">// Set draw color
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_SetRenderDrawColor</span>(renderer, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">255</span>, SDL_ALPHA_OPAQUE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create a rectangle
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>SDL_Rect example_rectangle;
</span></span><span style="display:flex;"><span>example_rectangle.x <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;	<span style="color:#75715e">// Set horizontal top left coordinate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>example_rectangle.y <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;	<span style="color:#75715e">// Set vertical top left coordinate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>example_rectangle.w <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;	<span style="color:#75715e">// Set width
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>example_rectangle.h <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;	<span style="color:#75715e">// Set height
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Draw a colored rectangle
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_RenderDrawRect</span>(renderer, <span style="color:#f92672">&amp;</span>example_rectangle);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Or, to fill in the rectangle as well
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//SDL_RenderFillRect(renderer, &amp;example_rectangle);
</span></span></span></code></pre></div><p><a href="/posts/c-sdl2-programming/images/sdl2_rectangle.png"><img alt="SDL2 rectangle" src="/posts/c-sdl2-programming/images/sdl2_rectangle.png"></a></p>
<h2 id="drawing-a-circle">Drawing a circle</h2>
<p>Drawing a circle is not something SDL2 can do by itself, but it can be done using a function and a custom datatype:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Create a datatype called &#34;SDL_Circle&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> x, y, r;	<span style="color:#75715e">// point x, point y, radius
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} SDL_Circle;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SDL_Circle circle;
</span></span><span style="display:flex;"><span>circle.x <span style="color:#f92672">=</span> <span style="color:#ae81ff">240</span>;
</span></span><span style="display:flex;"><span>circle.y <span style="color:#f92672">=</span> <span style="color:#ae81ff">240</span>;
</span></span><span style="display:flex;"><span>circle.r <span style="color:#f92672">=</span> <span style="color:#ae81ff">240</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Render a circle by drawing 360 lines
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">SDL_RenderDrawCircle</span>(SDL_Renderer<span style="color:#f92672">*</span> renderer, <span style="color:#66d9ef">const</span> SDL_Circle<span style="color:#f92672">*</span> circle) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">double</span> PI <span style="color:#f92672">=</span> <span style="color:#a6e22e">acos</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">double</span> angle <span style="color:#f92672">=</span> <span style="color:#ae81ff">360</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Calculate a point
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">double</span> rotation <span style="color:#f92672">=</span> angle <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>PI <span style="color:#f92672">/</span> <span style="color:#ae81ff">360</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">double</span> point_x_start <span style="color:#f92672">=</span> circle<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+</span> <span style="color:#a6e22e">cos</span>(rotation) <span style="color:#f92672">*</span> circle<span style="color:#f92672">-&gt;</span>r;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">double</span> point_y_start <span style="color:#f92672">=</span> circle<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+</span> <span style="color:#a6e22e">sin</span>(rotation) <span style="color:#f92672">*</span> circle<span style="color:#f92672">-&gt;</span>r;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Calculate the next point
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		rotation <span style="color:#f92672">=</span> (angle<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>PI <span style="color:#f92672">/</span> <span style="color:#ae81ff">360</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">double</span> point_x_end <span style="color:#f92672">=</span> circle<span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">+</span> <span style="color:#a6e22e">cos</span>(rotation) <span style="color:#f92672">*</span> circle<span style="color:#f92672">-&gt;</span>r;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">double</span> point_y_end <span style="color:#f92672">=</span> circle<span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">+</span> <span style="color:#a6e22e">sin</span>(rotation) <span style="color:#f92672">*</span> circle<span style="color:#f92672">-&gt;</span>r;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Draw a line between the two points
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">SDL_RenderDrawLine</span>(renderer, (<span style="color:#66d9ef">int</span>)point_x_start, (<span style="color:#66d9ef">int</span>)point_y_start, (<span style="color:#66d9ef">int</span>)point_x_end, (<span style="color:#66d9ef">int</span>)point_y_end);
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">while</span>(angle<span style="color:#f92672">--&gt;</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// in the main loop, call the function as follows after setting the right color:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">SDL_RenderDrawCircle</span>(renderer, <span style="color:#f92672">&amp;</span>circle);
</span></span></code></pre></div><p>This results in the following drawing being made:</p>
<p><a href="/posts/c-sdl2-programming/images/sdl2_circle.png"><img alt="SDL2 circle" src="/posts/c-sdl2-programming/images/sdl2_circle.png"></a></p>
<h2 id="drawing-an-image">Drawing an image</h2>
<p>SDL2 can draw images as sprites:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Enable support for JPG, PNG and/or TIF before creating the window
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">IMG_Init</span>(IMG_INIT_JPG<span style="color:#f92672">|</span>IMG_INIT_PNG<span style="color:#f92672">|</span>IMG_INIT_TIF);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Import image files before running the main loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>SDL_Texture<span style="color:#f92672">*</span> example_texture <span style="color:#f92672">=</span> <span style="color:#a6e22e">IMG_LoadTexture</span>(renderer, <span style="color:#e6db74">&#34;image.jpg&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Render the texture inside the main loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>SDL_Rect dstrect;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> rotation <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>dstrect.x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>dstrect.y <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SDL_GetWindowSize</span>(window, <span style="color:#f92672">&amp;</span>dstrect.w, <span style="color:#f92672">&amp;</span>dstrect.h);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SDL_RenderCopyEx</span>(renderer, example_texture, NULL, <span style="color:#f92672">&amp;</span>dstrect, rotation, NULL, SDL_FLIP_NONE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// After the main window, before the window closes, run IMG_Quit();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">IMG_Quit</span>();
</span></span></code></pre></div><p>This results in the image being drawn on the screen:</p>
<p><a href="/posts/c-sdl2-programming/images/sdl2_image_rendering.png"><img alt="SDL2 image rendering" src="/posts/c-sdl2-programming/images/sdl2_image_rendering.png"></a></p>
<h2 id="playing-audio">Playing audio</h2>
<p>To play audio, the following code can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Initialize audio before the main loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> number_of_channels <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;    <span style="color:#75715e">// SDL2 will play max 50 audio clips at the same time
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">Mix_OpenAudio</span>(<span style="color:#ae81ff">44100</span>, AUDIO_S16SYS, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">512</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;Could not open audio: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">SDL_GetError</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">Mix_AllocateChannels</span>(number_of_channels) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;Could not allocate mixing channels: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">SDL_GetError</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Before the main loop, import all audio files as mix chunks
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Mix_Chunk<span style="color:#f92672">*</span> example_audio <span style="color:#f92672">=</span> <span style="color:#a6e22e">Mix_LoadWAV</span>(<span style="color:#e6db74">&#34;audio.wav&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// During the main loop, when audio needs to play, it can be done using the following code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Mix_PlayChannel</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, example_audio, <span style="color:#ae81ff">0</span>);  <span style="color:#75715e">// -1 automatically selects the first available audio channel
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// After the main loop, before the program shuts down, make sure to close the audio mixer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Mix_CloseAudio</span>();
</span></span></code></pre></div><h2 id="rendering-text">Rendering text</h2>
<p>To render text in SDL2, a font file with the extension <em>.ttf</em> is needed. It is to be placed in the same directory as the binary, or in a subdirectory within the project.</p>
<p>First, enable font support and load a font by running the code below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">TTF_Init</span>();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> font_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>TTF_Font<span style="color:#f92672">*</span> font <span style="color:#f92672">=</span> <span style="color:#a6e22e">TTF_OpenFont</span>(<span style="color:#e6db74">&#34;path/to/font-file.ttf&#34;</span>, font_size);
</span></span></code></pre></div><p>Then, to render text on the screen using this font, the following function can be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">text_render</span>(SDL_Renderer<span style="color:#f92672">*</span> renderer, TTF_Font<span style="color:#f92672">*</span> font, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> message, <span style="color:#66d9ef">int</span> position_x, <span style="color:#66d9ef">int</span> position_y, <span style="color:#66d9ef">int</span> rotation_angle, <span style="color:#66d9ef">bool</span> center, SDL_Color<span style="color:#f92672">*</span> text_color) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Declare variables that will contain text size values generated by TTF_SizeText()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> text_width;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> text_height;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Tell SDL2 to convert the imported ttf file and message into a texture
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    SDL_Surface<span style="color:#f92672">*</span> message_surface <span style="color:#f92672">=</span> <span style="color:#a6e22e">TTF_RenderText_Solid</span>(font, message, <span style="color:#f92672">*</span>text_color);
</span></span><span style="display:flex;"><span>    SDL_Texture<span style="color:#f92672">*</span> message_texture <span style="color:#f92672">=</span> <span style="color:#a6e22e">SDL_CreateTextureFromSurface</span>(renderer, message_surface);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Define dimensions of the text
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">TTF_SizeText</span>(font, message, <span style="color:#f92672">&amp;</span>text_width, <span style="color:#f92672">&amp;</span>text_height);
</span></span><span style="display:flex;"><span>    SDL_Rect message_rect;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(center) {
</span></span><span style="display:flex;"><span>        message_rect.x <span style="color:#f92672">=</span> position_x <span style="color:#f92672">-</span> (text_width <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>        message_rect.y <span style="color:#f92672">=</span> position_y <span style="color:#f92672">-</span> (text_height <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        message_rect.x <span style="color:#f92672">=</span> position_x;
</span></span><span style="display:flex;"><span>        message_rect.y <span style="color:#f92672">=</span> position_y;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    message_rect.w <span style="color:#f92672">=</span> text_width;
</span></span><span style="display:flex;"><span>    message_rect.h <span style="color:#f92672">=</span> text_height;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Add the text to the rendering queue.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// SDL_RenderCopy(renderer, message_texture, NULL, &amp;message_rect);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">SDL_RenderCopyEx</span>(renderer, message_texture, NULL, <span style="color:#f92672">&amp;</span>message_rect, rotation_angle, NULL, SDL_FLIP_NONE);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Delete the texture, since it&#39;s written to the screen already
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">SDL_FreeSurface</span>(message_surface);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SDL_DestroyTexture</span>(message_texture);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The function can now be called somewhere in <code>main()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Define a text color
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>SDL_Color color;
</span></span><span style="display:flex;"><span>color.r <span style="color:#f92672">=</span> <span style="color:#ae81ff">255</span>;               <span style="color:#75715e">// red
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>color.g <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;               <span style="color:#75715e">// green
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>color.b <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;               <span style="color:#75715e">// blue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>color.a <span style="color:#f92672">=</span> SDL_ALPHA_OPAQUE;  <span style="color:#75715e">// alpha
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Define the message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Example text&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Render it all in the main loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> x_end, y_end;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SDL_GetWindowSize</span>(window, <span style="color:#f92672">&amp;</span>x_end, <span style="color:#f92672">&amp;</span>y_end);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">text_render</span>(renderer, font, message, x_end <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>, y_end <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>, true, <span style="color:#f92672">&amp;</span>color);
</span></span></code></pre></div><p>Just before the window is closed, <code>TTF_Quit()</code> needs to be called to free some memory.</p>
<p>This will result in the following window being shown:</p>
<p><a href="/posts/c-sdl2-programming/images/sdl2_example_text.png"><img alt="SDL2 text rendering" src="/posts/c-sdl2-programming/images/sdl2_example_text.png"></a></p>
<h2 id="keyboard-input">Keyboard input</h2>
<h3 id="game-like-keyboard-input">Game-like keyboard input</h3>
<p>todo</p>
<h3 id="program-like-keyboard-input">Program-like keyboard input</h3>
<p>todo</p>
<h2 id="mouse-input">Mouse input</h2>
<p>todo</p>
<h2 id="controller-input">Controller input</h2>
<p>todo</p>
]]></content>
        </item>
        
        <item>
            <title>Programming a character device driver (PinePhone and Linux)</title>
            <link>https://tomniesse.github.io/posts/pinephone-linux-kernel-programming/</link>
            <pubDate>Wed, 03 Nov 2021 13:28:55 +0200</pubDate>
            
            <guid>https://tomniesse.github.io/posts/pinephone-linux-kernel-programming/</guid>
            <description>Introduction This page describes the process of writing a kernel module that can toggle an LED inside a PinePhone UBports edition.
Using the user manual of the phone&amp;rsquo;s processor (Allwinner A64), a kernel module will be written that can control the RGB-LED of the phone.
What is a kernel module? A kernel is a piece of software that handles all the communications between hardware and software. The linux kernel uses modules for this.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This page describes the process of writing a kernel module that can toggle an LED inside a PinePhone UBports edition.<br>
Using the user manual of the phone&rsquo;s processor (Allwinner A64), a kernel module will be written that can control the RGB-LED of the phone.</p>
<h1 id="what-is-a-kernel-module">What is a kernel module?</h1>
<p>A kernel is a piece of software that handles all the communications between hardware and software. The linux kernel uses modules for this. Only the kernel and it&rsquo;s modules are allowed to read/write to/from hardware.</p>
<h1 id="the-goal">The goal</h1>
<p>The goal of this little project is to create a linux module that turns the built-in RGB-LED of the PinePhone UBports edition on or off. The same approach can be used to control GPIO ports on other embedded systems, like Raspberry Pi&rsquo;s. How cool would it be to understand the magic behind packages like <a href="http://wiringpi.com/wiringpi-deprecated">wiringPi</a>?</p>
<h1 id="reading-schematics">Reading schematics</h1>
<p>The Pine64 website hosts a <a href="http://files.pine64.org/doc/PinePhone/PinePhone%20v1.2%20Released%20Schematic.pdf">schematic</a>, which tells how the PinePhone is wired on the inside. Page 11 says how the RGB-led is connected:</p>
<p><a href="/posts/pinephone-linux-kernel-programming/images/pinephone_led_schematic.png"><img alt="LED schematic" src="/posts/pinephone-linux-kernel-programming/images/pinephone_led_schematic.png"></a></p>
<ul>
<li>PD18-LED-R is connected to B+</li>
<li>PD19-LED-G is connected to R+</li>
<li>PD20-LED-B is connected to G+</li>
</ul>
<h1 id="figuring-out-how-to-control-the-io-pins">Figuring out how to control the IO pins</h1>
<p>The schematic provided enough information. It&rsquo;s now time to start digging into the workings of the Allwinner A64 SoC. The A64 SoC has two lenghty documents;</p>
<ul>
<li>The <a href="https://files.pine64.org/doc/datasheet/pine64/A64_Datasheet_V1.1.pdf">datasheet</a> provides information about how to integrate the A64 SoC into a project and focuses on the electronic side of things.</li>
<li>The <a href="https://linux-sunxi.org/images/b/b4/Allwinner_A64_User_Manual_V1.1.pdf">user manual</a> contains information about how the SoC works and contains information about the different registers present in the SoC.</li>
</ul>
<p>For this project, only the user manual will be used, as it contains all the required information.</p>
<h2 id="finding-the-right-registers">Finding the right registers</h2>
<p>Chapter 3.21 (page 376) of the <a href="https://linux-sunxi.org/images/b/b4/Allwinner_A64_User_Manual_V1.1.pdf">user manual</a> contains information about some of the registers in the A64 SoC. At the top of the page, the following text can be read:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>The chip has 7 ports for multi-functional input/out pins. They are shown below:
</span></span><span style="display:flex;"><span>- Port B(PB): 10 input/output port
</span></span><span style="display:flex;"><span>- Port C(PC): 17 input/output port
</span></span><span style="display:flex;"><span>- Port D(PD): 25 input/output port
</span></span><span style="display:flex;"><span>- Port E(PE): 18 input/output port
</span></span><span style="display:flex;"><span>- Port F(PF): 7 input/output port
</span></span><span style="display:flex;"><span>- Port G(PG): 14 input/output port
</span></span><span style="display:flex;"><span>- Port H(PH): 12 input/output port
</span></span></code></pre></div><p>Port D is the one that will be controlled (<code>PD18</code>, <code>PD19</code> and <code>PD20</code>).</p>
<p>Further down the same page, some memory offsets are shown. This is because the RGB led is connected using MMIO (Memory Mapped IO). When a certain part of memory is altered, the corresponding IO port will turn on or off. There are a few configure registers (which set pin modes), a data register (which turns the IO port on or off), a multi-driving register (to control voltage levels?) and a fell pull registers (for pull-down and pull-up purposes).</p>
<p>For this project, only the configure register <code>PD_CFG2</code> and the data register <code>PD_DAT</code> will be used. All the other registers can be set if so desired, but it is not needed.</p>
<h2 id="creating-code-to-handle-pin-modes">Creating code to handle pin modes</h2>
<h3 id="memory-structure">Memory structure</h3>
<p>In chapter 3.21.2.21 (page 387) of the <a href="https://linux-sunxi.org/images/b/b4/Allwinner_A64_User_Manual_V1.1.pdf">user manual</a>, the following information can be seen:</p>
<table>
<thead>
<tr>
<th>Offset: 0x74</th>
<th style="text-align:center">Register Name: PD_CFG2_REG</th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th>Bit</th>
<th style="text-align:left">R/W</th>
<th style="text-align:left">Default/Hex</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:center">&hellip;</td>
</tr>
<tr>
<td>18:16</td>
<td style="text-align:left">R/W</td>
<td style="text-align:left">0x7</td>
<td style="text-align:center">PD20_SELECT<br>000: Input <br> 001: Output<br>&hellip;</td>
</tr>
<tr>
<td>15</td>
<td style="text-align:left">/</td>
<td style="text-align:left">/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td>14:12</td>
<td style="text-align:left">R/W</td>
<td style="text-align:left">0x7</td>
<td style="text-align:center">PD19_SELECT<br>000: Input <br> 001: Output<br>&hellip;</td>
</tr>
<tr>
<td>11</td>
<td style="text-align:left">/</td>
<td style="text-align:left">/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td>10:8</td>
<td style="text-align:left">R/W</td>
<td style="text-align:left">0x7</td>
<td style="text-align:center">PD18_SELECT<br>000: Input <br> 001: Output<br>&hellip;</td>
</tr>
<tr>
<td>&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:center">&hellip;</td>
</tr>
</tbody>
</table>
<p>A 3 bit value controls pin modes in register <code>PD_CFG2_REG</code>. Let&rsquo;s set some pin modes using the C language</p>
<p>The C language has a datatype called <code>struct</code>, which can be used to &ldquo;convert&rdquo; the table into the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_16    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_17    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_18    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_19    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_20    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_21    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_22    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> PD_23    : <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> reserved : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>} PD_CFG2_REG_t;
</span></span></code></pre></div><p>The <code>struct</code> will ensure that the right bits are set in memory, without having to set individual bits.</p>
<h3 id="memory-location">Memory location</h3>
<p>In the above table, an offset of <code>0x74</code> can be seen. The memory address of this MMIO register will be <code>PIO</code> (<code>0x01C20800</code>) + <code>0x74</code>. In code, this could look as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define PIO 0x01C20800
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define PD_CFG2_REG_ADDRESS (PIO + 0x74)
</span></span></span></code></pre></div><h2 id="altering-the-memory">Altering the memory</h2>
<p>The code to alter a piece of memory looks a bit magical, but it works quite well:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define MODE_OUTPUT   0x1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define MODE_DISABLED 0x7 </span><span style="color:#75715e">// default
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>((<span style="color:#66d9ef">volatile</span> PD_CFG2_REG_t<span style="color:#f92672">*</span>)PD_CFG2_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD18 <span style="color:#f92672">=</span> MODE_OUTPUT;
</span></span><span style="display:flex;"><span>((<span style="color:#66d9ef">volatile</span> PD_CFG2_REG_t<span style="color:#f92672">*</span>)PD_CFG2_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD19 <span style="color:#f92672">=</span> MODE_OUTPUT;
</span></span><span style="display:flex;"><span>((<span style="color:#66d9ef">volatile</span> PD_CFG2_REG_t<span style="color:#f92672">*</span>)PD_CFG2_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD20 <span style="color:#f92672">=</span> MODE_OUTPUT;
</span></span></code></pre></div><ul>
<li>The values <code>0x1</code> and <code>0x7</code> are copied from the user manual in hexadacimal form and set the right pin mode. The user manual includes many more pin modes, but those are not used here.</li>
<li>The <code>volatile</code> keyword tells C that it should trust the programmer and just set the bits, as requested. Not including <code>volatile</code> will result in unpredictable behaviour.</li>
<li>The <code>PD_CFG2_REG_t*</code> part is part of a cast. C is told that whatever resides at the memory location of <code>PD_CFG2_REG_ADDRESS</code> is of type <code>PD_CFG2_REG_t*</code>.</li>
<li>So, <code>((volatile PD_CFG2_REG_t*)PD_CFG2_REG_ADDRESS)</code> can be seen as a pointer to a struct. Using this method, C can directly alter memory without the need for a variable.</li>
</ul>
<h2 id="turning-the-io-pins-on-or-off">Turning the IO pins on or off</h2>
<p>The method that is used to set the pin modes will be used to turn the IO pins on or off as well. The required table is found in chapter 3.21.2.23 (page 388) of the <a href="https://linux-sunxi.org/images/b/b4/Allwinner_A64_User_Manual_V1.1.pdf">user manual</a> and the <code>struct</code> and <code>address</code> will be as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define PIO 0x01C20800                      </span><span style="color:#75715e">// same PIO address as the configure code uses
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#define PD_DATA_REG_ADDRESS (PIO + 0x7C)    </span><span style="color:#75715e">// this time the offset is 0x7C
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_0      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_1      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_2      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_3      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_4      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_5      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_6      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_7      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_8      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_9      : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_10     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_11     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_12     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_13     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_14     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_15     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_16     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_17     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_18     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_19     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_20     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_21     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_22     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_23     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  PD_24     : <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span>  reserved  : <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>} PD_DATA_REG_t;
</span></span></code></pre></div><p>And to then turn the IO pins on or off, very similar pointer-magic will be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>((<span style="color:#66d9ef">volatile</span> PD_DATA_REG_t<span style="color:#f92672">*</span>)PD_DATA_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD18 <span style="color:#f92672">=</span> true; <span style="color:#75715e">// or false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>((<span style="color:#66d9ef">volatile</span> PD_DATA_REG_t<span style="color:#f92672">*</span>)PD_DATA_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD19 <span style="color:#f92672">=</span> true; <span style="color:#75715e">// or false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>((<span style="color:#66d9ef">volatile</span> PD_DATA_REG_t<span style="color:#f92672">*</span>)PD_DATA_REG_ADDRESS)<span style="color:#f92672">-&gt;</span>PD20 <span style="color:#f92672">=</span> true; <span style="color:#75715e">// or false;
</span></span></span></code></pre></div><h1 id="creating-a-linux-kernel-module">Creating a linux kernel module</h1>
<h2 id="a-bare-bones-linux-kernel-module">A bare bones linux kernel module</h2>
<p>All the code that is required to set pinmodes is present, but if it&rsquo;s ran in userspace (even as superuser), it will result in a <code>segfault</code>. This is because the Linux kernel does not allow memory to be altered directly. To get around this, a kernel module will be written.</p>
<p>A bare bones kernel module looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// filename: mymodule.c (do not name it &#39;module.c&#39;!)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">mymodule_init</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// do initializing here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: Hello from kernel module!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">mymodule_exit</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// do exit stuff here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: Goodbye from kernel module!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_init</span>(mymodule_init);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_exit</span>(mymodule_exit);
</span></span></code></pre></div><p>Make sure to not name anything <code>module</code>. Use a custom name like <code>mymodule</code>, or it might not compile.</p>
<p>The following <code>Makefile</code> will compile the kernel module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>obj-m <span style="color:#f92672">:=</span> mymodule.o
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>KERNEL_VERSION <span style="color:#f92672">=</span> <span style="color:#66d9ef">$(</span>shell uname -r<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>KERNEL_DIR     <span style="color:#f92672">=</span> /usr/lib/modules/<span style="color:#66d9ef">$(</span>KERNEL_VERSION<span style="color:#66d9ef">)</span>/build/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Create the kernel module</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KERNEL_DIR<span style="color:#66d9ef">)</span> M<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> modules
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Delete every other temporary file, leaving only the .ko file in place</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">`</span>rm mymodule.mo* mymodule.o modules.order Module.symvers ./.*.cmd<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Delete all build files</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KERNEL_DIR<span style="color:#66d9ef">)</span> M<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> clean
</span></span></code></pre></div><p>To then add the kernel module to the kernel, the command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo insmod mymodule.ko
</span></span></code></pre></div><p>can be issued.</p>
<p>After that, when the command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dmesg
</span></span></code></pre></div><p>can be executed to see the kernel logs. The new linux module should have logged a greeting. To see it happening in realtime, the <code>-w</code> option can de added to the dmesg command.</p>
<p>To remove the kernel module from the linux kernel, the command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo rmmod mymodule
</span></span></code></pre></div><p>can be used.</p>
<h2 id="a-kernel-module-that-alters-memory">A kernel module that alters memory</h2>
<p>To alter the MMIO registers of the PinePhone, a <code>character device</code> kernel module will be written. It will take an array of 3 characters and turn the right bits on and off using the values of the array. It will also be able to read the current state of the memory and return it in the form of a 3 character long array. All communication will happen through <code>/dev/mymodule</code>, a virtual device.</p>
<p>All the used memory locations and structures will be put in a separate file called <code>mmio.h</code>. The new kernel module looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/semaphore.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/io.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/uaccess.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdbool.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdbool.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;mmio.h&#34;   // contains all the structs and addresses</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define DEVICE_NAME &#34;mymodule&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_BUFFER_SIZE 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_DESCRIPTION</span>(DEVICE_NAME);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_AUTHOR</span>(<span style="color:#e6db74">&#34;Tom Niesse&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_LICENSE</span>(<span style="color:#e6db74">&#34;GPLv3&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create variables that have to do with registering a cdev object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> cdev<span style="color:#f92672">*</span> mcdev;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> major_number;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> return_value;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">dev_t</span> dev_num;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create a structure for a virtual device
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> virtual_device {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> data[MAX_BUFFER_SIZE];
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> semaphore sem;
</span></span><span style="display:flex;"><span>} virtual_device;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create file operations structure using define because it&#39;s position
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// in the module is a bit un-intuitive (in-between functions)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#define FILE_OPERATIONS_CALLBACKS \
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">struct file_operations fops = {\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    .owner = THIS_MODULE,\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    .open = device_open,\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    .release = device_close,\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    .write = device_write,\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    .read = device_read\
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">};
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create variables that have to do with MMIO
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">volatile</span> PD_CFG2_REG_t<span style="color:#f92672">*</span> pd_cfg2_virtual_address <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">volatile</span> PD_DATA_REG_t<span style="color:#f92672">*</span> pd_data_virtual_address <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A user wants to read to or write from /dev/mymodule
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// and opens the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">device_open</span>(<span style="color:#66d9ef">struct</span> inode <span style="color:#f92672">*</span> inode, <span style="color:#66d9ef">struct</span> file <span style="color:#f92672">*</span>filp) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">down_interruptible</span>(<span style="color:#f92672">&amp;</span>virtual_device.sem) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: could not lock device for reading or writing.&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: device </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/dev/%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> is opened for reading or writing&#34;</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A user is reading from /dev/mymodule
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">ssize_t</span> <span style="color:#a6e22e">device_read</span>(<span style="color:#66d9ef">struct</span> file<span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> buffer, <span style="color:#66d9ef">size_t</span> buffer_size, <span style="color:#66d9ef">loff_t</span><span style="color:#f92672">*</span> current_offset) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: A user is reading from </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/dev/%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">, writing information...&#34;</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Convert the booleans to characters for all colors (red and green switched)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span>(pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD19_DATA) {
</span></span><span style="display:flex;"><span>		virtual_device.data[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span>;
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		virtual_device.data[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD18_DATA) {
</span></span><span style="display:flex;"><span>            virtual_device.data[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            virtual_device.data[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD20_DATA) {
</span></span><span style="display:flex;"><span>            virtual_device.data[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            virtual_device.data[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	return_value <span style="color:#f92672">=</span> <span style="color:#a6e22e">copy_to_user</span>(buffer, virtual_device.data, buffer_size);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> return_value;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A user is writing to /dev/mymodule
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">ssize_t</span> <span style="color:#a6e22e">device_write</span>(<span style="color:#66d9ef">struct</span> file<span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> buffer, <span style="color:#66d9ef">size_t</span> buffer_size, <span style="color:#66d9ef">loff_t</span><span style="color:#f92672">*</span> current_offset) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> pos;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Make sure the buffer is exactly 3 in length
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span>(buffer_size <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: A user is writing to </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/dev/%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">, reading information...&#34;</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>	return_value <span style="color:#f92672">=</span> <span style="color:#a6e22e">copy_from_user</span>(virtual_device.data, buffer, buffer_size);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Set color red
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(virtual_device.data[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>) {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD19_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD19_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Set color green
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(virtual_device.data[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>) {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD18_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD18_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Set color blue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(virtual_device.data[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>) {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD20_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        pd_data_virtual_address<span style="color:#f92672">-&gt;</span>PD20_DATA <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Log for debugging purposes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span>(pos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; pos <span style="color:#f92672">&lt;</span> MAX_BUFFER_SIZE; pos<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;Setting POS = %d to value %c&#34;</span>, pos, virtual_device.data[pos]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> return_value;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// A user is done with /dev/mymodule,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// the file can be closed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">device_close</span>(<span style="color:#66d9ef">struct</span> inode<span style="color:#f92672">*</span> inode, <span style="color:#66d9ef">struct</span> file<span style="color:#f92672">*</span> filp) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">up</span>(<span style="color:#f92672">&amp;</span>virtual_device.sem);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: closed device </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/dev/%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">.&#34;</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Place file operations callback structure here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>FILE_OPERATIONS_CALLBACKS
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">mymodule_init</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Ask for virtual addresses to control MMIO
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	pd_cfg2_virtual_address <span style="color:#f92672">=</span> <span style="color:#a6e22e">ioremap</span>((<span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)PD_CFG2_REG_ADDRESS, <span style="color:#66d9ef">sizeof</span>(PD_CFG2_REG_t));
</span></span><span style="display:flex;"><span>	pd_data_virtual_address <span style="color:#f92672">=</span> <span style="color:#a6e22e">ioremap</span>((<span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)PD_DATA_REG_ADDRESS, <span style="color:#66d9ef">sizeof</span>(PD_DATA_REG_t));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Register the /dev/mymodule connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	return_value <span style="color:#f92672">=</span> <span style="color:#a6e22e">alloc_chrdev_region</span>(<span style="color:#f92672">&amp;</span>dev_num, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(return_value <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: failed to allocate a major number. virtual device will NOT work!&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> return_value;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	major_number <span style="color:#f92672">=</span> <span style="color:#a6e22e">MAJOR</span>(dev_num);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: major number is %d&#34;</span>, major_number);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;use </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">mknod /dev/%s c %d 0</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> to create a virtual device for this module.&#34;</span>, DEVICE_NAME, major_number);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	mcdev <span style="color:#f92672">=</span> <span style="color:#a6e22e">cdev_alloc</span>();
</span></span><span style="display:flex;"><span>	mcdev<span style="color:#f92672">-&gt;</span>ops <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>fops;
</span></span><span style="display:flex;"><span>	mcdev<span style="color:#f92672">-&gt;</span>owner <span style="color:#f92672">=</span> THIS_MODULE;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	return_value <span style="color:#f92672">=</span> <span style="color:#a6e22e">cdev_add</span>(mcdev, dev_num, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(return_value <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: could not add cdev to kernel. virtual device will NOT work!&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> return_value;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sema_init</span>(<span style="color:#f92672">&amp;</span>virtual_device.sem, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">mymodule_exit</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Free the MMIO virtual addresses
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">iounmap</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)pd_cfg2_virtual_address);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">iounmap</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)pd_data_virtual_address);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Unregister the module
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">cdev_del</span>(mcdev);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">unregister_chrdev_region</span>(dev_num, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printk</span>(KERN_INFO <span style="color:#e6db74">&#34;mymodule: module has exited. make sure to delete </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">/dev/%s</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&#34;</span>, DEVICE_NAME);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_init</span>(mymodule_init);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_exit</span>(mymodule_exit);
</span></span></code></pre></div><p>When this module is loaded in using</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo insmod mymodule.ko
</span></span></code></pre></div><p>it will log how to make a virtual device. After executing that command as superuser, a virtual device called <code>/dev/mymodule</code> will have been created.</p>
<h1 id="communicating-with-the-kernel-module">Communicating with the kernel module</h1>
<p>Communication can be done using a C or C++ program that runs in userland (as superuser):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// main.c
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_BUFFER_SIZE 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define DEVICE          &#34;/dev/mymodule&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> buffer[MAX_BUFFER_SIZE];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Perform a read operation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(DEVICE, O_RDWR);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(fd, this<span style="color:#f92672">-&gt;</span>buffer, MAX_BUFFER_SIZE);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(fd);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Perform a write operation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(DEVICE, O_RDWR);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">write</span>(fd, this<span style="color:#f92672">-&gt;</span>buffer, MAX_BUFFER_SIZE);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(fd);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="controlling-other-peripherals">Controlling other peripherals</h1>
<p>The built-in motor, which makes the phone vibrate when a message arrives, is also directly controlled by a MMIO register of the A64 SoC. Another kernel module can be written to enable, disable and control that motor.</p>
]]></content>
        </item>
        
    </channel>
</rss>
